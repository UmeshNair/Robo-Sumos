
robo_sumos.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001962  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000010c  00800060  00001962  000019f6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000f  0080016c  0080016c  00001b02  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  00001b02  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000002e1  00000000  00000000  00001b22  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000004fc  00000000  00000000  00001e03  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000102  00000000  00000000  000022ff  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000a9c  00000000  00000000  00002401  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000240  00000000  00000000  00002ea0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002b9  00000000  00000000  000030e0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__vector_1>
       8:	0c 94 fc 00 	jmp	0x1f8	; 0x1f8 <__vector_2>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 8c 03 	jmp	0x718	; 0x718 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	ac e6       	ldi	r26, 0x6C	; 108
      64:	b1 e0       	ldi	r27, 0x01	; 1
      66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
      68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
      6a:	ab 37       	cpi	r26, 0x7B	; 123
      6c:	b1 07       	cpc	r27, r17
      6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>

00000070 <__do_copy_data>:
      70:	11 e0       	ldi	r17, 0x01	; 1
      72:	a0 e6       	ldi	r26, 0x60	; 96
      74:	b0 e0       	ldi	r27, 0x00	; 0
      76:	e2 e6       	ldi	r30, 0x62	; 98
      78:	f9 e1       	ldi	r31, 0x19	; 25
      7a:	02 c0       	rjmp	.+4      	; 0x80 <.do_copy_data_start>

0000007c <.do_copy_data_loop>:
      7c:	05 90       	lpm	r0, Z+
      7e:	0d 92       	st	X+, r0

00000080 <.do_copy_data_start>:
      80:	ac 36       	cpi	r26, 0x6C	; 108
      82:	b1 07       	cpc	r27, r17
      84:	d9 f7       	brne	.-10     	; 0x7c <.do_copy_data_loop>
      86:	0e 94 ad 03 	call	0x75a	; 0x75a <main>
      8a:	0c 94 af 0c 	jmp	0x195e	; 0x195e <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <motion_pin_config>:
unsigned char dummy=0;
unsigned char dummy1=0;
unsigned int x=0;
//Function to configure ports to enable robot's motion
void motion_pin_config (void) 
{
      92:	df 93       	push	r29
      94:	cf 93       	push	r28
      96:	cd b7       	in	r28, 0x3d	; 61
      98:	de b7       	in	r29, 0x3e	; 62
 DDRB = DDRB | 0x0F;   //set direction of the PORTB3 to PORTB0 pins as output
      9a:	a7 e3       	ldi	r26, 0x37	; 55
      9c:	b0 e0       	ldi	r27, 0x00	; 0
      9e:	e7 e3       	ldi	r30, 0x37	; 55
      a0:	f0 e0       	ldi	r31, 0x00	; 0
      a2:	80 81       	ld	r24, Z
      a4:	8f 60       	ori	r24, 0x0F	; 15
      a6:	8c 93       	st	X, r24
 PORTB = PORTB & 0xF0; // set initial value of the PORTB3 to PORTB0 pins to logic 0
      a8:	a8 e3       	ldi	r26, 0x38	; 56
      aa:	b0 e0       	ldi	r27, 0x00	; 0
      ac:	e8 e3       	ldi	r30, 0x38	; 56
      ae:	f0 e0       	ldi	r31, 0x00	; 0
      b0:	80 81       	ld	r24, Z
      b2:	80 7f       	andi	r24, 0xF0	; 240
      b4:	8c 93       	st	X, r24
 DDRD = DDRD | 0x30;   //Setting PD4 and PD5 pins as output for PWM generation
      b6:	a1 e3       	ldi	r26, 0x31	; 49
      b8:	b0 e0       	ldi	r27, 0x00	; 0
      ba:	e1 e3       	ldi	r30, 0x31	; 49
      bc:	f0 e0       	ldi	r31, 0x00	; 0
      be:	80 81       	ld	r24, Z
      c0:	80 63       	ori	r24, 0x30	; 48
      c2:	8c 93       	st	X, r24
 PORTD = PORTD | 0x30; //PD4 and PD5 pins are for velocity control using PWM
      c4:	a2 e3       	ldi	r26, 0x32	; 50
      c6:	b0 e0       	ldi	r27, 0x00	; 0
      c8:	e2 e3       	ldi	r30, 0x32	; 50
      ca:	f0 e0       	ldi	r31, 0x00	; 0
      cc:	80 81       	ld	r24, Z
      ce:	80 63       	ori	r24, 0x30	; 48
      d0:	8c 93       	st	X, r24
}
      d2:	cf 91       	pop	r28
      d4:	df 91       	pop	r29
      d6:	08 95       	ret

000000d8 <left_encoder_pin_config>:

//Function to configure INT1 (PORTD 3) pin as input for the left position encoder
void left_encoder_pin_config (void)
{
      d8:	df 93       	push	r29
      da:	cf 93       	push	r28
      dc:	cd b7       	in	r28, 0x3d	; 61
      de:	de b7       	in	r29, 0x3e	; 62
 DDRD  = DDRD & 0xF7;  //Set the direction of the PORTD 3 pin as input
      e0:	a1 e3       	ldi	r26, 0x31	; 49
      e2:	b0 e0       	ldi	r27, 0x00	; 0
      e4:	e1 e3       	ldi	r30, 0x31	; 49
      e6:	f0 e0       	ldi	r31, 0x00	; 0
      e8:	80 81       	ld	r24, Z
      ea:	87 7f       	andi	r24, 0xF7	; 247
      ec:	8c 93       	st	X, r24
 PORTD = PORTD | 0x08; //Enable internal pull-up for PORTD 3 pin
      ee:	a2 e3       	ldi	r26, 0x32	; 50
      f0:	b0 e0       	ldi	r27, 0x00	; 0
      f2:	e2 e3       	ldi	r30, 0x32	; 50
      f4:	f0 e0       	ldi	r31, 0x00	; 0
      f6:	80 81       	ld	r24, Z
      f8:	88 60       	ori	r24, 0x08	; 8
      fa:	8c 93       	st	X, r24
}
      fc:	cf 91       	pop	r28
      fe:	df 91       	pop	r29
     100:	08 95       	ret

00000102 <right_encoder_pin_config>:

//Function to configure INT0 (PORTD 2) pin as input for the right position encoder
void right_encoder_pin_config (void)
{
     102:	df 93       	push	r29
     104:	cf 93       	push	r28
     106:	cd b7       	in	r28, 0x3d	; 61
     108:	de b7       	in	r29, 0x3e	; 62
 DDRD  = DDRD & 0xFB;  //Set the direction of the PORTD 2 pin as input
     10a:	a1 e3       	ldi	r26, 0x31	; 49
     10c:	b0 e0       	ldi	r27, 0x00	; 0
     10e:	e1 e3       	ldi	r30, 0x31	; 49
     110:	f0 e0       	ldi	r31, 0x00	; 0
     112:	80 81       	ld	r24, Z
     114:	8b 7f       	andi	r24, 0xFB	; 251
     116:	8c 93       	st	X, r24
 PORTD = PORTD | 0x04; //Enable internal pull-up for PORTD 2 pin
     118:	a2 e3       	ldi	r26, 0x32	; 50
     11a:	b0 e0       	ldi	r27, 0x00	; 0
     11c:	e2 e3       	ldi	r30, 0x32	; 50
     11e:	f0 e0       	ldi	r31, 0x00	; 0
     120:	80 81       	ld	r24, Z
     122:	84 60       	ori	r24, 0x04	; 4
     124:	8c 93       	st	X, r24
}
     126:	cf 91       	pop	r28
     128:	df 91       	pop	r29
     12a:	08 95       	ret

0000012c <port_init>:

//Function to initialize ports
void port_init()
{
     12c:	df 93       	push	r29
     12e:	cf 93       	push	r28
     130:	cd b7       	in	r28, 0x3d	; 61
     132:	de b7       	in	r29, 0x3e	; 62
 motion_pin_config();          //robot motion pins config
     134:	0e 94 49 00 	call	0x92	; 0x92 <motion_pin_config>
 left_encoder_pin_config();    //left encoder pin config
     138:	0e 94 6c 00 	call	0xd8	; 0xd8 <left_encoder_pin_config>
 right_encoder_pin_config();   //right encoder pin config	
     13c:	0e 94 81 00 	call	0x102	; 0x102 <right_encoder_pin_config>
}
     140:	cf 91       	pop	r28
     142:	df 91       	pop	r29
     144:	08 95       	ret

00000146 <left_position_encoder_interrupt_init>:

void left_position_encoder_interrupt_init (void) //Interrupt 1 enable
{
     146:	df 93       	push	r29
     148:	cf 93       	push	r28
     14a:	cd b7       	in	r28, 0x3d	; 61
     14c:	de b7       	in	r29, 0x3e	; 62
 cli(); //Clears the global interrupt
     14e:	f8 94       	cli
 MCUCR = MCUCR | 0x08; // INT1 is set to trigger with falling edge
     150:	a5 e5       	ldi	r26, 0x55	; 85
     152:	b0 e0       	ldi	r27, 0x00	; 0
     154:	e5 e5       	ldi	r30, 0x55	; 85
     156:	f0 e0       	ldi	r31, 0x00	; 0
     158:	80 81       	ld	r24, Z
     15a:	88 60       	ori	r24, 0x08	; 8
     15c:	8c 93       	st	X, r24
 GICR = GICR | 0x80;   // Enable Interrupt INT1 for left position encoder
     15e:	ab e5       	ldi	r26, 0x5B	; 91
     160:	b0 e0       	ldi	r27, 0x00	; 0
     162:	eb e5       	ldi	r30, 0x5B	; 91
     164:	f0 e0       	ldi	r31, 0x00	; 0
     166:	80 81       	ld	r24, Z
     168:	80 68       	ori	r24, 0x80	; 128
     16a:	8c 93       	st	X, r24
 sei(); // Enables the global interrupt 
     16c:	78 94       	sei
}
     16e:	cf 91       	pop	r28
     170:	df 91       	pop	r29
     172:	08 95       	ret

00000174 <right_position_encoder_interrupt_init>:

void right_position_encoder_interrupt_init (void) //Interrupt 0 enable
{
     174:	df 93       	push	r29
     176:	cf 93       	push	r28
     178:	cd b7       	in	r28, 0x3d	; 61
     17a:	de b7       	in	r29, 0x3e	; 62
 cli(); //Clears the global interrupt
     17c:	f8 94       	cli
 MCUCR = MCUCR | 0x02; // INT0 is set to trigger with falling edge
     17e:	a5 e5       	ldi	r26, 0x55	; 85
     180:	b0 e0       	ldi	r27, 0x00	; 0
     182:	e5 e5       	ldi	r30, 0x55	; 85
     184:	f0 e0       	ldi	r31, 0x00	; 0
     186:	80 81       	ld	r24, Z
     188:	82 60       	ori	r24, 0x02	; 2
     18a:	8c 93       	st	X, r24
 GICR = GICR | 0x40;   // Enable Interrupt INT5 for right position encoder
     18c:	ab e5       	ldi	r26, 0x5B	; 91
     18e:	b0 e0       	ldi	r27, 0x00	; 0
     190:	eb e5       	ldi	r30, 0x5B	; 91
     192:	f0 e0       	ldi	r31, 0x00	; 0
     194:	80 81       	ld	r24, Z
     196:	80 64       	ori	r24, 0x40	; 64
     198:	8c 93       	st	X, r24
 sei(); // Enables the global interrupt 
     19a:	78 94       	sei
}
     19c:	cf 91       	pop	r28
     19e:	df 91       	pop	r29
     1a0:	08 95       	ret

000001a2 <__vector_1>:

//ISR for right position encoder
ISR(INT0_vect)  
{
     1a2:	1f 92       	push	r1
     1a4:	0f 92       	push	r0
     1a6:	0f b6       	in	r0, 0x3f	; 63
     1a8:	0f 92       	push	r0
     1aa:	11 24       	eor	r1, r1
     1ac:	8f 93       	push	r24
     1ae:	9f 93       	push	r25
     1b0:	af 93       	push	r26
     1b2:	bf 93       	push	r27
     1b4:	df 93       	push	r29
     1b6:	cf 93       	push	r28
     1b8:	cd b7       	in	r28, 0x3d	; 61
     1ba:	de b7       	in	r29, 0x3e	; 62
 ShaftCountRight++;  //increment right shaft position count
     1bc:	80 91 70 01 	lds	r24, 0x0170
     1c0:	90 91 71 01 	lds	r25, 0x0171
     1c4:	a0 91 72 01 	lds	r26, 0x0172
     1c8:	b0 91 73 01 	lds	r27, 0x0173
     1cc:	01 96       	adiw	r24, 0x01	; 1
     1ce:	a1 1d       	adc	r26, r1
     1d0:	b1 1d       	adc	r27, r1
     1d2:	80 93 70 01 	sts	0x0170, r24
     1d6:	90 93 71 01 	sts	0x0171, r25
     1da:	a0 93 72 01 	sts	0x0172, r26
     1de:	b0 93 73 01 	sts	0x0173, r27
}
     1e2:	cf 91       	pop	r28
     1e4:	df 91       	pop	r29
     1e6:	bf 91       	pop	r27
     1e8:	af 91       	pop	r26
     1ea:	9f 91       	pop	r25
     1ec:	8f 91       	pop	r24
     1ee:	0f 90       	pop	r0
     1f0:	0f be       	out	0x3f, r0	; 63
     1f2:	0f 90       	pop	r0
     1f4:	1f 90       	pop	r1
     1f6:	18 95       	reti

000001f8 <__vector_2>:

//ISR for left position encoder
ISR(INT1_vect)
{
     1f8:	1f 92       	push	r1
     1fa:	0f 92       	push	r0
     1fc:	0f b6       	in	r0, 0x3f	; 63
     1fe:	0f 92       	push	r0
     200:	11 24       	eor	r1, r1
     202:	8f 93       	push	r24
     204:	9f 93       	push	r25
     206:	af 93       	push	r26
     208:	bf 93       	push	r27
     20a:	df 93       	push	r29
     20c:	cf 93       	push	r28
     20e:	cd b7       	in	r28, 0x3d	; 61
     210:	de b7       	in	r29, 0x3e	; 62
 ShaftCountLeft++;  //increment left shaft position count
     212:	80 91 6c 01 	lds	r24, 0x016C
     216:	90 91 6d 01 	lds	r25, 0x016D
     21a:	a0 91 6e 01 	lds	r26, 0x016E
     21e:	b0 91 6f 01 	lds	r27, 0x016F
     222:	01 96       	adiw	r24, 0x01	; 1
     224:	a1 1d       	adc	r26, r1
     226:	b1 1d       	adc	r27, r1
     228:	80 93 6c 01 	sts	0x016C, r24
     22c:	90 93 6d 01 	sts	0x016D, r25
     230:	a0 93 6e 01 	sts	0x016E, r26
     234:	b0 93 6f 01 	sts	0x016F, r27
}
     238:	cf 91       	pop	r28
     23a:	df 91       	pop	r29
     23c:	bf 91       	pop	r27
     23e:	af 91       	pop	r26
     240:	9f 91       	pop	r25
     242:	8f 91       	pop	r24
     244:	0f 90       	pop	r0
     246:	0f be       	out	0x3f, r0	; 63
     248:	0f 90       	pop	r0
     24a:	1f 90       	pop	r1
     24c:	18 95       	reti

0000024e <uart0_init>:

void uart0_init(void)
{
     24e:	df 93       	push	r29
     250:	cf 93       	push	r28
     252:	cd b7       	in	r28, 0x3d	; 61
     254:	de b7       	in	r29, 0x3e	; 62
 UCSRB = 0x00; //disable while setting baud rate
     256:	ea e2       	ldi	r30, 0x2A	; 42
     258:	f0 e0       	ldi	r31, 0x00	; 0
     25a:	10 82       	st	Z, r1
 UCSRA = 0x00;
     25c:	eb e2       	ldi	r30, 0x2B	; 43
     25e:	f0 e0       	ldi	r31, 0x00	; 0
     260:	10 82       	st	Z, r1
 UCSRC = 0x86;
     262:	e0 e4       	ldi	r30, 0x40	; 64
     264:	f0 e0       	ldi	r31, 0x00	; 0
     266:	86 e8       	ldi	r24, 0x86	; 134
     268:	80 83       	st	Z, r24
 UBRRL = 0x2F; //set baud rate lo  //67 is for 16MHz 9600 baudrate
     26a:	e9 e2       	ldi	r30, 0x29	; 41
     26c:	f0 e0       	ldi	r31, 0x00	; 0
     26e:	8f e2       	ldi	r24, 0x2F	; 47
     270:	80 83       	st	Z, r24
 UBRRH = 0x00; //set baud rate hi
     272:	e0 e4       	ldi	r30, 0x40	; 64
     274:	f0 e0       	ldi	r31, 0x00	; 0
     276:	10 82       	st	Z, r1
 UCSRB = 0x98; 
     278:	ea e2       	ldi	r30, 0x2A	; 42
     27a:	f0 e0       	ldi	r31, 0x00	; 0
     27c:	88 e9       	ldi	r24, 0x98	; 152
     27e:	80 83       	st	Z, r24
}
     280:	cf 91       	pop	r28
     282:	df 91       	pop	r29
     284:	08 95       	ret

00000286 <motion_set>:


//Function used for setting motor's direction
void motion_set (unsigned char Direction)
{
     286:	df 93       	push	r29
     288:	cf 93       	push	r28
     28a:	00 d0       	rcall	.+0      	; 0x28c <motion_set+0x6>
     28c:	cd b7       	in	r28, 0x3d	; 61
     28e:	de b7       	in	r29, 0x3e	; 62
     290:	8a 83       	std	Y+2, r24	; 0x02
 unsigned char PortBRestore = 0;
     292:	19 82       	std	Y+1, r1	; 0x01

 Direction &= 0x0F; 		// removing upper nibbel for the protection
     294:	8a 81       	ldd	r24, Y+2	; 0x02
     296:	8f 70       	andi	r24, 0x0F	; 15
     298:	8a 83       	std	Y+2, r24	; 0x02
 PortBRestore = PORTB; 		// reading the PORT original status
     29a:	e8 e3       	ldi	r30, 0x38	; 56
     29c:	f0 e0       	ldi	r31, 0x00	; 0
     29e:	80 81       	ld	r24, Z
     2a0:	89 83       	std	Y+1, r24	; 0x01
 PortBRestore &= 0xF0; 		// making lower direction nibbel to 0
     2a2:	89 81       	ldd	r24, Y+1	; 0x01
     2a4:	80 7f       	andi	r24, 0xF0	; 240
     2a6:	89 83       	std	Y+1, r24	; 0x01
 PortBRestore |= Direction; // adding lower nibbel for forward command and restoring the PORTB status
     2a8:	99 81       	ldd	r25, Y+1	; 0x01
     2aa:	8a 81       	ldd	r24, Y+2	; 0x02
     2ac:	89 2b       	or	r24, r25
     2ae:	89 83       	std	Y+1, r24	; 0x01
 PORTB = PortBRestore; 		// executing the command
     2b0:	e8 e3       	ldi	r30, 0x38	; 56
     2b2:	f0 e0       	ldi	r31, 0x00	; 0
     2b4:	89 81       	ldd	r24, Y+1	; 0x01
     2b6:	80 83       	st	Z, r24
}
     2b8:	0f 90       	pop	r0
     2ba:	0f 90       	pop	r0
     2bc:	cf 91       	pop	r28
     2be:	df 91       	pop	r29
     2c0:	08 95       	ret

000002c2 <forward>:

void forward (void) //both wheels forward
{
     2c2:	df 93       	push	r29
     2c4:	cf 93       	push	r28
     2c6:	cd b7       	in	r28, 0x3d	; 61
     2c8:	de b7       	in	r29, 0x3e	; 62
  motion_set(0x06);
     2ca:	86 e0       	ldi	r24, 0x06	; 6
     2cc:	0e 94 43 01 	call	0x286	; 0x286 <motion_set>
}
     2d0:	cf 91       	pop	r28
     2d2:	df 91       	pop	r29
     2d4:	08 95       	ret

000002d6 <back>:

void back (void) //both wheels backward
{
     2d6:	df 93       	push	r29
     2d8:	cf 93       	push	r28
     2da:	cd b7       	in	r28, 0x3d	; 61
     2dc:	de b7       	in	r29, 0x3e	; 62
  motion_set(0x09);
     2de:	89 e0       	ldi	r24, 0x09	; 9
     2e0:	0e 94 43 01 	call	0x286	; 0x286 <motion_set>
}
     2e4:	cf 91       	pop	r28
     2e6:	df 91       	pop	r29
     2e8:	08 95       	ret

000002ea <left>:

void left (void) //Left wheel backward, Right wheel forward
{
     2ea:	df 93       	push	r29
     2ec:	cf 93       	push	r28
     2ee:	cd b7       	in	r28, 0x3d	; 61
     2f0:	de b7       	in	r29, 0x3e	; 62
  motion_set(0x05);
     2f2:	85 e0       	ldi	r24, 0x05	; 5
     2f4:	0e 94 43 01 	call	0x286	; 0x286 <motion_set>
}
     2f8:	cf 91       	pop	r28
     2fa:	df 91       	pop	r29
     2fc:	08 95       	ret

000002fe <right>:

void right (void) //Left wheel forward, Right wheel backward
{
     2fe:	df 93       	push	r29
     300:	cf 93       	push	r28
     302:	cd b7       	in	r28, 0x3d	; 61
     304:	de b7       	in	r29, 0x3e	; 62
  motion_set(0x0A);
     306:	8a e0       	ldi	r24, 0x0A	; 10
     308:	0e 94 43 01 	call	0x286	; 0x286 <motion_set>
}
     30c:	cf 91       	pop	r28
     30e:	df 91       	pop	r29
     310:	08 95       	ret

00000312 <soft_left>:

void soft_left (void) //Left wheel stationary, Right wheel forward
{
     312:	df 93       	push	r29
     314:	cf 93       	push	r28
     316:	cd b7       	in	r28, 0x3d	; 61
     318:	de b7       	in	r29, 0x3e	; 62
 motion_set(0x04);
     31a:	84 e0       	ldi	r24, 0x04	; 4
     31c:	0e 94 43 01 	call	0x286	; 0x286 <motion_set>
}
     320:	cf 91       	pop	r28
     322:	df 91       	pop	r29
     324:	08 95       	ret

00000326 <soft_right>:

void soft_right (void) //Left wheel forward, Right wheel is stationary
{
     326:	df 93       	push	r29
     328:	cf 93       	push	r28
     32a:	cd b7       	in	r28, 0x3d	; 61
     32c:	de b7       	in	r29, 0x3e	; 62
 motion_set(0x02);
     32e:	82 e0       	ldi	r24, 0x02	; 2
     330:	0e 94 43 01 	call	0x286	; 0x286 <motion_set>
}
     334:	cf 91       	pop	r28
     336:	df 91       	pop	r29
     338:	08 95       	ret

0000033a <soft_left_2>:

void soft_left_2 (void) //Left wheel backward, right wheel stationary
{
     33a:	df 93       	push	r29
     33c:	cf 93       	push	r28
     33e:	cd b7       	in	r28, 0x3d	; 61
     340:	de b7       	in	r29, 0x3e	; 62
 motion_set(0x01);
     342:	81 e0       	ldi	r24, 0x01	; 1
     344:	0e 94 43 01 	call	0x286	; 0x286 <motion_set>
}
     348:	cf 91       	pop	r28
     34a:	df 91       	pop	r29
     34c:	08 95       	ret

0000034e <soft_right_2>:

void soft_right_2 (void) //Left wheel stationary, Right wheel backward
{
     34e:	df 93       	push	r29
     350:	cf 93       	push	r28
     352:	cd b7       	in	r28, 0x3d	; 61
     354:	de b7       	in	r29, 0x3e	; 62
 motion_set(0x08);
     356:	88 e0       	ldi	r24, 0x08	; 8
     358:	0e 94 43 01 	call	0x286	; 0x286 <motion_set>
}
     35c:	cf 91       	pop	r28
     35e:	df 91       	pop	r29
     360:	08 95       	ret

00000362 <stop>:

void stop (void)
{
     362:	df 93       	push	r29
     364:	cf 93       	push	r28
     366:	cd b7       	in	r28, 0x3d	; 61
     368:	de b7       	in	r29, 0x3e	; 62
  motion_set(0x00);
     36a:	80 e0       	ldi	r24, 0x00	; 0
     36c:	0e 94 43 01 	call	0x286	; 0x286 <motion_set>
}
     370:	cf 91       	pop	r28
     372:	df 91       	pop	r29
     374:	08 95       	ret

00000376 <angle_rotate>:


//Function used for turning robot by specified degrees
void angle_rotate(unsigned int Degrees)
{
     376:	df 93       	push	r29
     378:	cf 93       	push	r28
     37a:	cd b7       	in	r28, 0x3d	; 61
     37c:	de b7       	in	r29, 0x3e	; 62
     37e:	2c 97       	sbiw	r28, 0x0c	; 12
     380:	0f b6       	in	r0, 0x3f	; 63
     382:	f8 94       	cli
     384:	de bf       	out	0x3e, r29	; 62
     386:	0f be       	out	0x3f, r0	; 63
     388:	cd bf       	out	0x3d, r28	; 61
     38a:	9a 87       	std	Y+10, r25	; 0x0a
     38c:	89 87       	std	Y+9, r24	; 0x09
 float ReqdShaftCount = 0;
     38e:	80 e0       	ldi	r24, 0x00	; 0
     390:	90 e0       	ldi	r25, 0x00	; 0
     392:	a0 e0       	ldi	r26, 0x00	; 0
     394:	b0 e0       	ldi	r27, 0x00	; 0
     396:	8d 83       	std	Y+5, r24	; 0x05
     398:	9e 83       	std	Y+6, r25	; 0x06
     39a:	af 83       	std	Y+7, r26	; 0x07
     39c:	b8 87       	std	Y+8, r27	; 0x08
 unsigned long int ReqdShaftCountInt = 0;
     39e:	19 82       	std	Y+1, r1	; 0x01
     3a0:	1a 82       	std	Y+2, r1	; 0x02
     3a2:	1b 82       	std	Y+3, r1	; 0x03
     3a4:	1c 82       	std	Y+4, r1	; 0x04

 ReqdShaftCount = (float) Degrees/ 12.85; // division by resolution to get shaft count 
     3a6:	89 85       	ldd	r24, Y+9	; 0x09
     3a8:	9a 85       	ldd	r25, Y+10	; 0x0a
     3aa:	cc 01       	movw	r24, r24
     3ac:	a0 e0       	ldi	r26, 0x00	; 0
     3ae:	b0 e0       	ldi	r27, 0x00	; 0
     3b0:	bc 01       	movw	r22, r24
     3b2:	cd 01       	movw	r24, r26
     3b4:	0e 94 26 09 	call	0x124c	; 0x124c <__floatunsisf>
     3b8:	dc 01       	movw	r26, r24
     3ba:	cb 01       	movw	r24, r22
     3bc:	bc 01       	movw	r22, r24
     3be:	cd 01       	movw	r24, r26
     3c0:	2a e9       	ldi	r18, 0x9A	; 154
     3c2:	39 e9       	ldi	r19, 0x99	; 153
     3c4:	4d e4       	ldi	r20, 0x4D	; 77
     3c6:	51 e4       	ldi	r21, 0x41	; 65
     3c8:	0e 94 f6 07 	call	0xfec	; 0xfec <__divsf3>
     3cc:	dc 01       	movw	r26, r24
     3ce:	cb 01       	movw	r24, r22
     3d0:	8d 83       	std	Y+5, r24	; 0x05
     3d2:	9e 83       	std	Y+6, r25	; 0x06
     3d4:	af 83       	std	Y+7, r26	; 0x07
     3d6:	b8 87       	std	Y+8, r27	; 0x08
 ReqdShaftCountInt = (unsigned int) ReqdShaftCount;
     3d8:	6d 81       	ldd	r22, Y+5	; 0x05
     3da:	7e 81       	ldd	r23, Y+6	; 0x06
     3dc:	8f 81       	ldd	r24, Y+7	; 0x07
     3de:	98 85       	ldd	r25, Y+8	; 0x08
     3e0:	0e 94 20 06 	call	0xc40	; 0xc40 <__fixunssfsi>
     3e4:	dc 01       	movw	r26, r24
     3e6:	cb 01       	movw	r24, r22
     3e8:	cc 01       	movw	r24, r24
     3ea:	a0 e0       	ldi	r26, 0x00	; 0
     3ec:	b0 e0       	ldi	r27, 0x00	; 0
     3ee:	89 83       	std	Y+1, r24	; 0x01
     3f0:	9a 83       	std	Y+2, r25	; 0x02
     3f2:	ab 83       	std	Y+3, r26	; 0x03
     3f4:	bc 83       	std	Y+4, r27	; 0x04
 ShaftCountRight = 0; 
     3f6:	10 92 70 01 	sts	0x0170, r1
     3fa:	10 92 71 01 	sts	0x0171, r1
     3fe:	10 92 72 01 	sts	0x0172, r1
     402:	10 92 73 01 	sts	0x0173, r1
 ShaftCountLeft = 0; 
     406:	10 92 6c 01 	sts	0x016C, r1
     40a:	10 92 6d 01 	sts	0x016D, r1
     40e:	10 92 6e 01 	sts	0x016E, r1
     412:	10 92 6f 01 	sts	0x016F, r1

 while (1)
 {
  if((ShaftCountRight >= ReqdShaftCountInt) | (ShaftCountLeft >= ReqdShaftCountInt))
     416:	20 91 70 01 	lds	r18, 0x0170
     41a:	30 91 71 01 	lds	r19, 0x0171
     41e:	40 91 72 01 	lds	r20, 0x0172
     422:	50 91 73 01 	lds	r21, 0x0173
     426:	1c 86       	std	Y+12, r1	; 0x0c
     428:	89 81       	ldd	r24, Y+1	; 0x01
     42a:	9a 81       	ldd	r25, Y+2	; 0x02
     42c:	ab 81       	ldd	r26, Y+3	; 0x03
     42e:	bc 81       	ldd	r27, Y+4	; 0x04
     430:	28 17       	cp	r18, r24
     432:	39 07       	cpc	r19, r25
     434:	4a 07       	cpc	r20, r26
     436:	5b 07       	cpc	r21, r27
     438:	10 f0       	brcs	.+4      	; 0x43e <angle_rotate+0xc8>
     43a:	81 e0       	ldi	r24, 0x01	; 1
     43c:	8c 87       	std	Y+12, r24	; 0x0c
     43e:	20 91 6c 01 	lds	r18, 0x016C
     442:	30 91 6d 01 	lds	r19, 0x016D
     446:	40 91 6e 01 	lds	r20, 0x016E
     44a:	50 91 6f 01 	lds	r21, 0x016F
     44e:	1b 86       	std	Y+11, r1	; 0x0b
     450:	89 81       	ldd	r24, Y+1	; 0x01
     452:	9a 81       	ldd	r25, Y+2	; 0x02
     454:	ab 81       	ldd	r26, Y+3	; 0x03
     456:	bc 81       	ldd	r27, Y+4	; 0x04
     458:	28 17       	cp	r18, r24
     45a:	39 07       	cpc	r19, r25
     45c:	4a 07       	cpc	r20, r26
     45e:	5b 07       	cpc	r21, r27
     460:	10 f0       	brcs	.+4      	; 0x466 <__stack+0x7>
     462:	91 e0       	ldi	r25, 0x01	; 1
     464:	9b 87       	std	Y+11, r25	; 0x0b
     466:	8c 85       	ldd	r24, Y+12	; 0x0c
     468:	9b 85       	ldd	r25, Y+11	; 0x0b
     46a:	89 2b       	or	r24, r25
     46c:	88 23       	and	r24, r24
     46e:	99 f2       	breq	.-90     	; 0x416 <angle_rotate+0xa0>
  break;
 }
 stop(); //Stop robot
     470:	0e 94 b1 01 	call	0x362	; 0x362 <stop>
}
     474:	2c 96       	adiw	r28, 0x0c	; 12
     476:	0f b6       	in	r0, 0x3f	; 63
     478:	f8 94       	cli
     47a:	de bf       	out	0x3e, r29	; 62
     47c:	0f be       	out	0x3f, r0	; 63
     47e:	cd bf       	out	0x3d, r28	; 61
     480:	cf 91       	pop	r28
     482:	df 91       	pop	r29
     484:	08 95       	ret

00000486 <linear_distance_mm>:

//Function used for moving robot forward by specified distance

void linear_distance_mm(unsigned int DistanceInMM)
{
     486:	df 93       	push	r29
     488:	cf 93       	push	r28
     48a:	cd b7       	in	r28, 0x3d	; 61
     48c:	de b7       	in	r29, 0x3e	; 62
     48e:	2a 97       	sbiw	r28, 0x0a	; 10
     490:	0f b6       	in	r0, 0x3f	; 63
     492:	f8 94       	cli
     494:	de bf       	out	0x3e, r29	; 62
     496:	0f be       	out	0x3f, r0	; 63
     498:	cd bf       	out	0x3d, r28	; 61
     49a:	9a 87       	std	Y+10, r25	; 0x0a
     49c:	89 87       	std	Y+9, r24	; 0x09
 float ReqdShaftCount = 0;
     49e:	80 e0       	ldi	r24, 0x00	; 0
     4a0:	90 e0       	ldi	r25, 0x00	; 0
     4a2:	a0 e0       	ldi	r26, 0x00	; 0
     4a4:	b0 e0       	ldi	r27, 0x00	; 0
     4a6:	8d 83       	std	Y+5, r24	; 0x05
     4a8:	9e 83       	std	Y+6, r25	; 0x06
     4aa:	af 83       	std	Y+7, r26	; 0x07
     4ac:	b8 87       	std	Y+8, r27	; 0x08
 unsigned long int ReqdShaftCountInt = 0;
     4ae:	19 82       	std	Y+1, r1	; 0x01
     4b0:	1a 82       	std	Y+2, r1	; 0x02
     4b2:	1b 82       	std	Y+3, r1	; 0x03
     4b4:	1c 82       	std	Y+4, r1	; 0x04

 ReqdShaftCount = DistanceInMM / 12.92; // division by resolution to get shaft count
     4b6:	89 85       	ldd	r24, Y+9	; 0x09
     4b8:	9a 85       	ldd	r25, Y+10	; 0x0a
     4ba:	cc 01       	movw	r24, r24
     4bc:	a0 e0       	ldi	r26, 0x00	; 0
     4be:	b0 e0       	ldi	r27, 0x00	; 0
     4c0:	bc 01       	movw	r22, r24
     4c2:	cd 01       	movw	r24, r26
     4c4:	0e 94 26 09 	call	0x124c	; 0x124c <__floatunsisf>
     4c8:	dc 01       	movw	r26, r24
     4ca:	cb 01       	movw	r24, r22
     4cc:	bc 01       	movw	r22, r24
     4ce:	cd 01       	movw	r24, r26
     4d0:	22 e5       	ldi	r18, 0x52	; 82
     4d2:	38 eb       	ldi	r19, 0xB8	; 184
     4d4:	4e e4       	ldi	r20, 0x4E	; 78
     4d6:	51 e4       	ldi	r21, 0x41	; 65
     4d8:	0e 94 f6 07 	call	0xfec	; 0xfec <__divsf3>
     4dc:	dc 01       	movw	r26, r24
     4de:	cb 01       	movw	r24, r22
     4e0:	8d 83       	std	Y+5, r24	; 0x05
     4e2:	9e 83       	std	Y+6, r25	; 0x06
     4e4:	af 83       	std	Y+7, r26	; 0x07
     4e6:	b8 87       	std	Y+8, r27	; 0x08
 ReqdShaftCountInt = (unsigned long int) ReqdShaftCount;
     4e8:	6d 81       	ldd	r22, Y+5	; 0x05
     4ea:	7e 81       	ldd	r23, Y+6	; 0x06
     4ec:	8f 81       	ldd	r24, Y+7	; 0x07
     4ee:	98 85       	ldd	r25, Y+8	; 0x08
     4f0:	0e 94 20 06 	call	0xc40	; 0xc40 <__fixunssfsi>
     4f4:	dc 01       	movw	r26, r24
     4f6:	cb 01       	movw	r24, r22
     4f8:	89 83       	std	Y+1, r24	; 0x01
     4fa:	9a 83       	std	Y+2, r25	; 0x02
     4fc:	ab 83       	std	Y+3, r26	; 0x03
     4fe:	bc 83       	std	Y+4, r27	; 0x04
  
 ShaftCountRight = 0;
     500:	10 92 70 01 	sts	0x0170, r1
     504:	10 92 71 01 	sts	0x0171, r1
     508:	10 92 72 01 	sts	0x0172, r1
     50c:	10 92 73 01 	sts	0x0173, r1
 while(1)
 {
  if(ShaftCountRight > ReqdShaftCountInt)
     510:	20 91 70 01 	lds	r18, 0x0170
     514:	30 91 71 01 	lds	r19, 0x0171
     518:	40 91 72 01 	lds	r20, 0x0172
     51c:	50 91 73 01 	lds	r21, 0x0173
     520:	89 81       	ldd	r24, Y+1	; 0x01
     522:	9a 81       	ldd	r25, Y+2	; 0x02
     524:	ab 81       	ldd	r26, Y+3	; 0x03
     526:	bc 81       	ldd	r27, Y+4	; 0x04
     528:	82 17       	cp	r24, r18
     52a:	93 07       	cpc	r25, r19
     52c:	a4 07       	cpc	r26, r20
     52e:	b5 07       	cpc	r27, r21
     530:	78 f7       	brcc	.-34     	; 0x510 <linear_distance_mm+0x8a>
  {
  	break;
  }
 } 
 stop(); //Stop robot
     532:	0e 94 b1 01 	call	0x362	; 0x362 <stop>
}
     536:	2a 96       	adiw	r28, 0x0a	; 10
     538:	0f b6       	in	r0, 0x3f	; 63
     53a:	f8 94       	cli
     53c:	de bf       	out	0x3e, r29	; 62
     53e:	0f be       	out	0x3f, r0	; 63
     540:	cd bf       	out	0x3d, r28	; 61
     542:	cf 91       	pop	r28
     544:	df 91       	pop	r29
     546:	08 95       	ret

00000548 <forward_mm>:

void forward_mm(unsigned int DistanceInMM)
{
     548:	df 93       	push	r29
     54a:	cf 93       	push	r28
     54c:	00 d0       	rcall	.+0      	; 0x54e <forward_mm+0x6>
     54e:	cd b7       	in	r28, 0x3d	; 61
     550:	de b7       	in	r29, 0x3e	; 62
     552:	9a 83       	std	Y+2, r25	; 0x02
     554:	89 83       	std	Y+1, r24	; 0x01
 forward();
     556:	0e 94 61 01 	call	0x2c2	; 0x2c2 <forward>
 linear_distance_mm(DistanceInMM);
     55a:	89 81       	ldd	r24, Y+1	; 0x01
     55c:	9a 81       	ldd	r25, Y+2	; 0x02
     55e:	0e 94 43 02 	call	0x486	; 0x486 <linear_distance_mm>
 return;
}
     562:	0f 90       	pop	r0
     564:	0f 90       	pop	r0
     566:	cf 91       	pop	r28
     568:	df 91       	pop	r29
     56a:	08 95       	ret

0000056c <back_mm>:

void back_mm(unsigned int DistanceInMM)
{
     56c:	df 93       	push	r29
     56e:	cf 93       	push	r28
     570:	00 d0       	rcall	.+0      	; 0x572 <back_mm+0x6>
     572:	cd b7       	in	r28, 0x3d	; 61
     574:	de b7       	in	r29, 0x3e	; 62
     576:	9a 83       	std	Y+2, r25	; 0x02
     578:	89 83       	std	Y+1, r24	; 0x01
 back();
     57a:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <back>
 linear_distance_mm(DistanceInMM);
     57e:	89 81       	ldd	r24, Y+1	; 0x01
     580:	9a 81       	ldd	r25, Y+2	; 0x02
     582:	0e 94 43 02 	call	0x486	; 0x486 <linear_distance_mm>
}
     586:	0f 90       	pop	r0
     588:	0f 90       	pop	r0
     58a:	cf 91       	pop	r28
     58c:	df 91       	pop	r29
     58e:	08 95       	ret

00000590 <left_mm>:
void left_mm(unsigned int DistanceInMM)
{
     590:	df 93       	push	r29
     592:	cf 93       	push	r28
     594:	00 d0       	rcall	.+0      	; 0x596 <left_mm+0x6>
     596:	cd b7       	in	r28, 0x3d	; 61
     598:	de b7       	in	r29, 0x3e	; 62
     59a:	9a 83       	std	Y+2, r25	; 0x02
     59c:	89 83       	std	Y+1, r24	; 0x01
 left();
     59e:	0e 94 75 01 	call	0x2ea	; 0x2ea <left>
 linear_distance_mm(DistanceInMM);
     5a2:	89 81       	ldd	r24, Y+1	; 0x01
     5a4:	9a 81       	ldd	r25, Y+2	; 0x02
     5a6:	0e 94 43 02 	call	0x486	; 0x486 <linear_distance_mm>
}
     5aa:	0f 90       	pop	r0
     5ac:	0f 90       	pop	r0
     5ae:	cf 91       	pop	r28
     5b0:	df 91       	pop	r29
     5b2:	08 95       	ret

000005b4 <right_mm>:

void right_mm(unsigned int DistanceInMM)
{
     5b4:	df 93       	push	r29
     5b6:	cf 93       	push	r28
     5b8:	00 d0       	rcall	.+0      	; 0x5ba <right_mm+0x6>
     5ba:	cd b7       	in	r28, 0x3d	; 61
     5bc:	de b7       	in	r29, 0x3e	; 62
     5be:	9a 83       	std	Y+2, r25	; 0x02
     5c0:	89 83       	std	Y+1, r24	; 0x01
 right();
     5c2:	0e 94 7f 01 	call	0x2fe	; 0x2fe <right>
 linear_distance_mm(DistanceInMM);
     5c6:	89 81       	ldd	r24, Y+1	; 0x01
     5c8:	9a 81       	ldd	r25, Y+2	; 0x02
     5ca:	0e 94 43 02 	call	0x486	; 0x486 <linear_distance_mm>
}
     5ce:	0f 90       	pop	r0
     5d0:	0f 90       	pop	r0
     5d2:	cf 91       	pop	r28
     5d4:	df 91       	pop	r29
     5d6:	08 95       	ret

000005d8 <left_degrees>:


void left_degrees(unsigned int Degrees) 
{
     5d8:	df 93       	push	r29
     5da:	cf 93       	push	r28
     5dc:	00 d0       	rcall	.+0      	; 0x5de <left_degrees+0x6>
     5de:	cd b7       	in	r28, 0x3d	; 61
     5e0:	de b7       	in	r29, 0x3e	; 62
     5e2:	9a 83       	std	Y+2, r25	; 0x02
     5e4:	89 83       	std	Y+1, r24	; 0x01
// 28 pulses for 360 degrees rotation 12.92 degrees per count
 left(); //Turn left
     5e6:	0e 94 75 01 	call	0x2ea	; 0x2ea <left>
 angle_rotate(Degrees);
     5ea:	89 81       	ldd	r24, Y+1	; 0x01
     5ec:	9a 81       	ldd	r25, Y+2	; 0x02
     5ee:	0e 94 bb 01 	call	0x376	; 0x376 <angle_rotate>
}
     5f2:	0f 90       	pop	r0
     5f4:	0f 90       	pop	r0
     5f6:	cf 91       	pop	r28
     5f8:	df 91       	pop	r29
     5fa:	08 95       	ret

000005fc <right_degrees>:



void right_degrees(unsigned int Degrees)
{
     5fc:	df 93       	push	r29
     5fe:	cf 93       	push	r28
     600:	00 d0       	rcall	.+0      	; 0x602 <right_degrees+0x6>
     602:	cd b7       	in	r28, 0x3d	; 61
     604:	de b7       	in	r29, 0x3e	; 62
     606:	9a 83       	std	Y+2, r25	; 0x02
     608:	89 83       	std	Y+1, r24	; 0x01
// 28 pulses for 360 degrees rotation 12.92 degrees per count
 right(); //Turn right
     60a:	0e 94 7f 01 	call	0x2fe	; 0x2fe <right>
 angle_rotate(Degrees);
     60e:	89 81       	ldd	r24, Y+1	; 0x01
     610:	9a 81       	ldd	r25, Y+2	; 0x02
     612:	0e 94 bb 01 	call	0x376	; 0x376 <angle_rotate>
}
     616:	0f 90       	pop	r0
     618:	0f 90       	pop	r0
     61a:	cf 91       	pop	r28
     61c:	df 91       	pop	r29
     61e:	08 95       	ret

00000620 <soft_left_degrees>:


void soft_left_degrees(unsigned int Degrees)
{
     620:	df 93       	push	r29
     622:	cf 93       	push	r28
     624:	00 d0       	rcall	.+0      	; 0x626 <soft_left_degrees+0x6>
     626:	cd b7       	in	r28, 0x3d	; 61
     628:	de b7       	in	r29, 0x3e	; 62
     62a:	9a 83       	std	Y+2, r25	; 0x02
     62c:	89 83       	std	Y+1, r24	; 0x01
 // 56 pulses for 360 degrees rotation 12.85 degrees per count
 soft_left(); //Turn soft left
     62e:	0e 94 89 01 	call	0x312	; 0x312 <soft_left>
 Degrees=Degrees*2;
     632:	89 81       	ldd	r24, Y+1	; 0x01
     634:	9a 81       	ldd	r25, Y+2	; 0x02
     636:	88 0f       	add	r24, r24
     638:	99 1f       	adc	r25, r25
     63a:	9a 83       	std	Y+2, r25	; 0x02
     63c:	89 83       	std	Y+1, r24	; 0x01
 angle_rotate(Degrees);
     63e:	89 81       	ldd	r24, Y+1	; 0x01
     640:	9a 81       	ldd	r25, Y+2	; 0x02
     642:	0e 94 bb 01 	call	0x376	; 0x376 <angle_rotate>
}
     646:	0f 90       	pop	r0
     648:	0f 90       	pop	r0
     64a:	cf 91       	pop	r28
     64c:	df 91       	pop	r29
     64e:	08 95       	ret

00000650 <soft_right_degrees>:

void soft_right_degrees(unsigned int Degrees)
{
     650:	df 93       	push	r29
     652:	cf 93       	push	r28
     654:	00 d0       	rcall	.+0      	; 0x656 <soft_right_degrees+0x6>
     656:	cd b7       	in	r28, 0x3d	; 61
     658:	de b7       	in	r29, 0x3e	; 62
     65a:	9a 83       	std	Y+2, r25	; 0x02
     65c:	89 83       	std	Y+1, r24	; 0x01
 // 56 pulses for 360 degrees rotation 12.85 degrees per count
 soft_right();  //Turn soft right
     65e:	0e 94 93 01 	call	0x326	; 0x326 <soft_right>
 Degrees=Degrees*2;
     662:	89 81       	ldd	r24, Y+1	; 0x01
     664:	9a 81       	ldd	r25, Y+2	; 0x02
     666:	88 0f       	add	r24, r24
     668:	99 1f       	adc	r25, r25
     66a:	9a 83       	std	Y+2, r25	; 0x02
     66c:	89 83       	std	Y+1, r24	; 0x01
 angle_rotate(Degrees);
     66e:	89 81       	ldd	r24, Y+1	; 0x01
     670:	9a 81       	ldd	r25, Y+2	; 0x02
     672:	0e 94 bb 01 	call	0x376	; 0x376 <angle_rotate>
}
     676:	0f 90       	pop	r0
     678:	0f 90       	pop	r0
     67a:	cf 91       	pop	r28
     67c:	df 91       	pop	r29
     67e:	08 95       	ret

00000680 <soft_left_2_degrees>:

void soft_left_2_degrees(unsigned int Degrees)
{
     680:	df 93       	push	r29
     682:	cf 93       	push	r28
     684:	00 d0       	rcall	.+0      	; 0x686 <soft_left_2_degrees+0x6>
     686:	cd b7       	in	r28, 0x3d	; 61
     688:	de b7       	in	r29, 0x3e	; 62
     68a:	9a 83       	std	Y+2, r25	; 0x02
     68c:	89 83       	std	Y+1, r24	; 0x01
 // 56 pulses for 360 degrees rotation 12.85 degrees per count
 soft_left_2(); //Turn reverse soft left
     68e:	0e 94 9d 01 	call	0x33a	; 0x33a <soft_left_2>
 Degrees=Degrees*2;
     692:	89 81       	ldd	r24, Y+1	; 0x01
     694:	9a 81       	ldd	r25, Y+2	; 0x02
     696:	88 0f       	add	r24, r24
     698:	99 1f       	adc	r25, r25
     69a:	9a 83       	std	Y+2, r25	; 0x02
     69c:	89 83       	std	Y+1, r24	; 0x01
 angle_rotate(Degrees);
     69e:	89 81       	ldd	r24, Y+1	; 0x01
     6a0:	9a 81       	ldd	r25, Y+2	; 0x02
     6a2:	0e 94 bb 01 	call	0x376	; 0x376 <angle_rotate>
}
     6a6:	0f 90       	pop	r0
     6a8:	0f 90       	pop	r0
     6aa:	cf 91       	pop	r28
     6ac:	df 91       	pop	r29
     6ae:	08 95       	ret

000006b0 <soft_right_2_degrees>:

void soft_right_2_degrees(unsigned int Degrees)
{
     6b0:	df 93       	push	r29
     6b2:	cf 93       	push	r28
     6b4:	00 d0       	rcall	.+0      	; 0x6b6 <soft_right_2_degrees+0x6>
     6b6:	cd b7       	in	r28, 0x3d	; 61
     6b8:	de b7       	in	r29, 0x3e	; 62
     6ba:	9a 83       	std	Y+2, r25	; 0x02
     6bc:	89 83       	std	Y+1, r24	; 0x01
 // 56 pulses for 360 degrees rotation 12.85 degrees per count
 soft_right_2();  //Turn reverse soft right
     6be:	0e 94 a7 01 	call	0x34e	; 0x34e <soft_right_2>
 Degrees=Degrees*2;
     6c2:	89 81       	ldd	r24, Y+1	; 0x01
     6c4:	9a 81       	ldd	r25, Y+2	; 0x02
     6c6:	88 0f       	add	r24, r24
     6c8:	99 1f       	adc	r25, r25
     6ca:	9a 83       	std	Y+2, r25	; 0x02
     6cc:	89 83       	std	Y+1, r24	; 0x01
 angle_rotate(Degrees);
     6ce:	89 81       	ldd	r24, Y+1	; 0x01
     6d0:	9a 81       	ldd	r25, Y+2	; 0x02
     6d2:	0e 94 bb 01 	call	0x376	; 0x376 <angle_rotate>
}
     6d6:	0f 90       	pop	r0
     6d8:	0f 90       	pop	r0
     6da:	cf 91       	pop	r28
     6dc:	df 91       	pop	r29
     6de:	08 95       	ret

000006e0 <init_devices>:

//Function to initialize all the devices
void init_devices()
{
     6e0:	df 93       	push	r29
     6e2:	cf 93       	push	r28
     6e4:	cd b7       	in	r28, 0x3d	; 61
     6e6:	de b7       	in	r29, 0x3e	; 62
 cli(); //Clears the global interrupt
     6e8:	f8 94       	cli
 port_init();  //Initializes all the ports
     6ea:	0e 94 96 00 	call	0x12c	; 0x12c <port_init>
 uart0_init();
     6ee:	0e 94 27 01 	call	0x24e	; 0x24e <uart0_init>
 left_position_encoder_interrupt_init();
     6f2:	0e 94 a3 00 	call	0x146	; 0x146 <left_position_encoder_interrupt_init>
 right_position_encoder_interrupt_init();
     6f6:	0e 94 ba 00 	call	0x174	; 0x174 <right_position_encoder_interrupt_init>
 sei();   // Enables the global interrupt 
     6fa:	78 94       	sei
}
     6fc:	cf 91       	pop	r28
     6fe:	df 91       	pop	r29
     700:	08 95       	ret

00000702 <uart0_clr>:


void uart0_clr(void)
{
     702:	df 93       	push	r29
     704:	cf 93       	push	r28
     706:	cd b7       	in	r28, 0x3d	; 61
     708:	de b7       	in	r29, 0x3e	; 62
 UCSRB = 0x08; 
     70a:	ea e2       	ldi	r30, 0x2A	; 42
     70c:	f0 e0       	ldi	r31, 0x00	; 0
     70e:	88 e0       	ldi	r24, 0x08	; 8
     710:	80 83       	st	Z, r24
}
     712:	cf 91       	pop	r28
     714:	df 91       	pop	r29
     716:	08 95       	ret

00000718 <__vector_11>:



SIGNAL(SIG_UART_RECV) 
{
     718:	1f 92       	push	r1
     71a:	0f 92       	push	r0
     71c:	0f b6       	in	r0, 0x3f	; 63
     71e:	0f 92       	push	r0
     720:	11 24       	eor	r1, r1
     722:	8f 93       	push	r24
     724:	ef 93       	push	r30
     726:	ff 93       	push	r31
     728:	df 93       	push	r29
     72a:	cf 93       	push	r28
     72c:	cd b7       	in	r28, 0x3d	; 61
     72e:	de b7       	in	r29, 0x3e	; 62
 receive_data = UDR;			
     730:	ec e2       	ldi	r30, 0x2C	; 44
     732:	f0 e0       	ldi	r31, 0x00	; 0
     734:	80 81       	ld	r24, Z
     736:	80 93 74 01 	sts	0x0174, r24
 
 UDR = receive_data+1;           // Echo the received data plus 1
     73a:	ec e2       	ldi	r30, 0x2C	; 44
     73c:	f0 e0       	ldi	r31, 0x00	; 0
     73e:	80 91 74 01 	lds	r24, 0x0174
     742:	8f 5f       	subi	r24, 0xFF	; 255
     744:	80 83       	st	Z, r24
} 
     746:	cf 91       	pop	r28
     748:	df 91       	pop	r29
     74a:	ff 91       	pop	r31
     74c:	ef 91       	pop	r30
     74e:	8f 91       	pop	r24
     750:	0f 90       	pop	r0
     752:	0f be       	out	0x3f, r0	; 63
     754:	0f 90       	pop	r0
     756:	1f 90       	pop	r1
     758:	18 95       	reti

0000075a <main>:

//Main Function

int main(void)
{
     75a:	df 93       	push	r29
     75c:	cf 93       	push	r28
     75e:	00 d0       	rcall	.+0      	; 0x760 <main+0x6>
     760:	cd b7       	in	r28, 0x3d	; 61
     762:	de b7       	in	r29, 0x3e	; 62
 init_devices();
     764:	0e 94 70 03 	call	0x6e0	; 0x6e0 <init_devices>
 while(1)
{
if(receive_data=='l'||receive_data=='r')
     768:	80 91 74 01 	lds	r24, 0x0174
     76c:	8c 36       	cpi	r24, 0x6C	; 108
     76e:	21 f0       	breq	.+8      	; 0x778 <main+0x1e>
     770:	80 91 74 01 	lds	r24, 0x0174
     774:	82 37       	cpi	r24, 0x72	; 114
     776:	59 f4       	brne	.+22     	; 0x78e <main+0x34>
 {
    uart0_clr();
     778:	0e 94 81 03 	call	0x702	; 0x702 <uart0_clr>
	dummy=receive_data ;
     77c:	80 91 74 01 	lds	r24, 0x0174
     780:	80 93 75 01 	sts	0x0175, r24
	receive_data = '0';
     784:	80 e3       	ldi	r24, 0x30	; 48
     786:	80 93 74 01 	sts	0x0174, r24
	uart0_init();
     78a:	0e 94 27 01 	call	0x24e	; 0x24e <uart0_init>
 }
 if(receive_data=='f')        
     78e:	80 91 74 01 	lds	r24, 0x0174
     792:	86 36       	cpi	r24, 0x66	; 102
     794:	f9 f4       	brne	.+62     	; 0x7d4 <main+0x7a>
 {
    uart0_clr();
     796:	0e 94 81 03 	call	0x702	; 0x702 <uart0_clr>
	receive_data = '0';
     79a:	80 e3       	ldi	r24, 0x30	; 48
     79c:	80 93 74 01 	sts	0x0174, r24
	int n = (rand() % 5)+5;
     7a0:	0e 94 e5 0b 	call	0x17ca	; 0x17ca <rand>
     7a4:	25 e0       	ldi	r18, 0x05	; 5
     7a6:	30 e0       	ldi	r19, 0x00	; 0
     7a8:	b9 01       	movw	r22, r18
     7aa:	0e 94 f5 0b 	call	0x17ea	; 0x17ea <__divmodhi4>
     7ae:	05 96       	adiw	r24, 0x05	; 5
     7b0:	9a 83       	std	Y+2, r25	; 0x02
     7b2:	89 83       	std	Y+1, r24	; 0x01
	forward_mm(n*100);
     7b4:	29 81       	ldd	r18, Y+1	; 0x01
     7b6:	3a 81       	ldd	r19, Y+2	; 0x02
     7b8:	84 e6       	ldi	r24, 0x64	; 100
     7ba:	90 e0       	ldi	r25, 0x00	; 0
     7bc:	ac 01       	movw	r20, r24
     7be:	24 9f       	mul	r18, r20
     7c0:	c0 01       	movw	r24, r0
     7c2:	25 9f       	mul	r18, r21
     7c4:	90 0d       	add	r25, r0
     7c6:	34 9f       	mul	r19, r20
     7c8:	90 0d       	add	r25, r0
     7ca:	11 24       	eor	r1, r1
     7cc:	0e 94 a4 02 	call	0x548	; 0x548 <forward_mm>
	uart0_init();
     7d0:	0e 94 27 01 	call	0x24e	; 0x24e <uart0_init>
 }
if(((receive_data== 'a'||receive_data=='b')&&receive_data!= '0')&&(dummy=='l'))
     7d4:	80 91 74 01 	lds	r24, 0x0174
     7d8:	81 36       	cpi	r24, 0x61	; 97
     7da:	21 f0       	breq	.+8      	; 0x7e4 <main+0x8a>
     7dc:	80 91 74 01 	lds	r24, 0x0174
     7e0:	82 36       	cpi	r24, 0x62	; 98
     7e2:	99 f4       	brne	.+38     	; 0x80a <main+0xb0>
     7e4:	80 91 74 01 	lds	r24, 0x0174
     7e8:	80 33       	cpi	r24, 0x30	; 48
     7ea:	79 f0       	breq	.+30     	; 0x80a <main+0xb0>
     7ec:	80 91 75 01 	lds	r24, 0x0175
     7f0:	8c 36       	cpi	r24, 0x6C	; 108
     7f2:	59 f4       	brne	.+22     	; 0x80a <main+0xb0>
 {
    uart0_clr();
     7f4:	0e 94 81 03 	call	0x702	; 0x702 <uart0_clr>
	dummy1=receive_data ;
     7f8:	80 91 74 01 	lds	r24, 0x0174
     7fc:	80 93 76 01 	sts	0x0176, r24
	receive_data = '0';
     800:	80 e3       	ldi	r24, 0x30	; 48
     802:	80 93 74 01 	sts	0x0174, r24
	uart0_init();
     806:	0e 94 27 01 	call	0x24e	; 0x24e <uart0_init>
 }
if(((receive_data== 'a'||receive_data=='b')&&receive_data!= '0')&&(dummy=='r'))
     80a:	80 91 74 01 	lds	r24, 0x0174
     80e:	81 36       	cpi	r24, 0x61	; 97
     810:	21 f0       	breq	.+8      	; 0x81a <main+0xc0>
     812:	80 91 74 01 	lds	r24, 0x0174
     816:	82 36       	cpi	r24, 0x62	; 98
     818:	99 f4       	brne	.+38     	; 0x840 <main+0xe6>
     81a:	80 91 74 01 	lds	r24, 0x0174
     81e:	80 33       	cpi	r24, 0x30	; 48
     820:	79 f0       	breq	.+30     	; 0x840 <main+0xe6>
     822:	80 91 75 01 	lds	r24, 0x0175
     826:	82 37       	cpi	r24, 0x72	; 114
     828:	59 f4       	brne	.+22     	; 0x840 <main+0xe6>
 {
    uart0_clr();
     82a:	0e 94 81 03 	call	0x702	; 0x702 <uart0_clr>
	dummy1=receive_data ;
     82e:	80 91 74 01 	lds	r24, 0x0174
     832:	80 93 76 01 	sts	0x0176, r24
	receive_data = '0';
     836:	80 e3       	ldi	r24, 0x30	; 48
     838:	80 93 74 01 	sts	0x0174, r24
	uart0_init();
     83c:	0e 94 27 01 	call	0x24e	; 0x24e <uart0_init>
 }

if((receive_data!= 'a'&&receive_data!= '0')&&(dummy1=='a')&&(dummy=='l'))
     840:	80 91 74 01 	lds	r24, 0x0174
     844:	81 36       	cpi	r24, 0x61	; 97
     846:	09 f4       	brne	.+2      	; 0x84a <main+0xf0>
     848:	b1 c0       	rjmp	.+354    	; 0x9ac <main+0x252>
     84a:	80 91 74 01 	lds	r24, 0x0174
     84e:	80 33       	cpi	r24, 0x30	; 48
     850:	09 f4       	brne	.+2      	; 0x854 <main+0xfa>
     852:	ac c0       	rjmp	.+344    	; 0x9ac <main+0x252>
     854:	80 91 76 01 	lds	r24, 0x0176
     858:	81 36       	cpi	r24, 0x61	; 97
     85a:	09 f0       	breq	.+2      	; 0x85e <main+0x104>
     85c:	a7 c0       	rjmp	.+334    	; 0x9ac <main+0x252>
     85e:	80 91 75 01 	lds	r24, 0x0175
     862:	8c 36       	cpi	r24, 0x6C	; 108
     864:	09 f0       	breq	.+2      	; 0x868 <main+0x10e>
     866:	a2 c0       	rjmp	.+324    	; 0x9ac <main+0x252>
 {
	if(receive_data=='9')
     868:	80 91 74 01 	lds	r24, 0x0174
     86c:	89 33       	cpi	r24, 0x39	; 57
     86e:	71 f4       	brne	.+28     	; 0x88c <main+0x132>
	{
	uart0_clr();
     870:	0e 94 81 03 	call	0x702	; 0x702 <uart0_clr>
	left_degrees(90);       
     874:	8a e5       	ldi	r24, 0x5A	; 90
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <left_degrees>
	receive_data = '0';
     87c:	80 e3       	ldi	r24, 0x30	; 48
     87e:	80 93 74 01 	sts	0x0174, r24
	dummy1='0';
     882:	80 e3       	ldi	r24, 0x30	; 48
     884:	80 93 76 01 	sts	0x0176, r24
	uart0_init();
     888:	0e 94 27 01 	call	0x24e	; 0x24e <uart0_init>
    }
	if(receive_data=='8')
     88c:	80 91 74 01 	lds	r24, 0x0174
     890:	88 33       	cpi	r24, 0x38	; 56
     892:	71 f4       	brne	.+28     	; 0x8b0 <main+0x156>
	{
	uart0_clr();
     894:	0e 94 81 03 	call	0x702	; 0x702 <uart0_clr>
	left_degrees(80);       
     898:	80 e5       	ldi	r24, 0x50	; 80
     89a:	90 e0       	ldi	r25, 0x00	; 0
     89c:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <left_degrees>
	receive_data = '0';
     8a0:	80 e3       	ldi	r24, 0x30	; 48
     8a2:	80 93 74 01 	sts	0x0174, r24
	dummy1='0';
     8a6:	80 e3       	ldi	r24, 0x30	; 48
     8a8:	80 93 76 01 	sts	0x0176, r24
	uart0_init();
     8ac:	0e 94 27 01 	call	0x24e	; 0x24e <uart0_init>
    }
	if(receive_data=='7')
     8b0:	80 91 74 01 	lds	r24, 0x0174
     8b4:	87 33       	cpi	r24, 0x37	; 55
     8b6:	71 f4       	brne	.+28     	; 0x8d4 <main+0x17a>
	{
	uart0_clr();
     8b8:	0e 94 81 03 	call	0x702	; 0x702 <uart0_clr>
	left_degrees(70);       
     8bc:	86 e4       	ldi	r24, 0x46	; 70
     8be:	90 e0       	ldi	r25, 0x00	; 0
     8c0:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <left_degrees>
	receive_data = '0';
     8c4:	80 e3       	ldi	r24, 0x30	; 48
     8c6:	80 93 74 01 	sts	0x0174, r24
	dummy1='0';
     8ca:	80 e3       	ldi	r24, 0x30	; 48
     8cc:	80 93 76 01 	sts	0x0176, r24
	uart0_init();
     8d0:	0e 94 27 01 	call	0x24e	; 0x24e <uart0_init>
    }
	if(receive_data=='6')
     8d4:	80 91 74 01 	lds	r24, 0x0174
     8d8:	86 33       	cpi	r24, 0x36	; 54
     8da:	71 f4       	brne	.+28     	; 0x8f8 <main+0x19e>
	{
	uart0_clr();
     8dc:	0e 94 81 03 	call	0x702	; 0x702 <uart0_clr>
	left_degrees(60);       
     8e0:	8c e3       	ldi	r24, 0x3C	; 60
     8e2:	90 e0       	ldi	r25, 0x00	; 0
     8e4:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <left_degrees>
	receive_data = '0';
     8e8:	80 e3       	ldi	r24, 0x30	; 48
     8ea:	80 93 74 01 	sts	0x0174, r24
	dummy1='0';
     8ee:	80 e3       	ldi	r24, 0x30	; 48
     8f0:	80 93 76 01 	sts	0x0176, r24
	uart0_init();
     8f4:	0e 94 27 01 	call	0x24e	; 0x24e <uart0_init>
    }
	if(receive_data=='5')
     8f8:	80 91 74 01 	lds	r24, 0x0174
     8fc:	85 33       	cpi	r24, 0x35	; 53
     8fe:	71 f4       	brne	.+28     	; 0x91c <main+0x1c2>
	{
	uart0_clr();
     900:	0e 94 81 03 	call	0x702	; 0x702 <uart0_clr>
	left_degrees(50);       
     904:	82 e3       	ldi	r24, 0x32	; 50
     906:	90 e0       	ldi	r25, 0x00	; 0
     908:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <left_degrees>
	receive_data = '0';
     90c:	80 e3       	ldi	r24, 0x30	; 48
     90e:	80 93 74 01 	sts	0x0174, r24
	dummy1='0';
     912:	80 e3       	ldi	r24, 0x30	; 48
     914:	80 93 76 01 	sts	0x0176, r24
	uart0_init();
     918:	0e 94 27 01 	call	0x24e	; 0x24e <uart0_init>
    }
	if(receive_data=='4')
     91c:	80 91 74 01 	lds	r24, 0x0174
     920:	84 33       	cpi	r24, 0x34	; 52
     922:	71 f4       	brne	.+28     	; 0x940 <main+0x1e6>
	{
	uart0_clr();
     924:	0e 94 81 03 	call	0x702	; 0x702 <uart0_clr>
	left_degrees(40);       
     928:	88 e2       	ldi	r24, 0x28	; 40
     92a:	90 e0       	ldi	r25, 0x00	; 0
     92c:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <left_degrees>
	receive_data = '0';
     930:	80 e3       	ldi	r24, 0x30	; 48
     932:	80 93 74 01 	sts	0x0174, r24
	dummy1='0';
     936:	80 e3       	ldi	r24, 0x30	; 48
     938:	80 93 76 01 	sts	0x0176, r24
	uart0_init();
     93c:	0e 94 27 01 	call	0x24e	; 0x24e <uart0_init>
    }
	if(receive_data=='3')
     940:	80 91 74 01 	lds	r24, 0x0174
     944:	83 33       	cpi	r24, 0x33	; 51
     946:	71 f4       	brne	.+28     	; 0x964 <main+0x20a>
	{
	uart0_clr();
     948:	0e 94 81 03 	call	0x702	; 0x702 <uart0_clr>
	left_degrees(30);       
     94c:	8e e1       	ldi	r24, 0x1E	; 30
     94e:	90 e0       	ldi	r25, 0x00	; 0
     950:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <left_degrees>
	receive_data = '0';
     954:	80 e3       	ldi	r24, 0x30	; 48
     956:	80 93 74 01 	sts	0x0174, r24
	dummy1='0';
     95a:	80 e3       	ldi	r24, 0x30	; 48
     95c:	80 93 76 01 	sts	0x0176, r24
	uart0_init();
     960:	0e 94 27 01 	call	0x24e	; 0x24e <uart0_init>
    }
	if(receive_data=='2')
     964:	80 91 74 01 	lds	r24, 0x0174
     968:	82 33       	cpi	r24, 0x32	; 50
     96a:	71 f4       	brne	.+28     	; 0x988 <main+0x22e>
	{
	uart0_clr();
     96c:	0e 94 81 03 	call	0x702	; 0x702 <uart0_clr>
	left_degrees(20);       
     970:	84 e1       	ldi	r24, 0x14	; 20
     972:	90 e0       	ldi	r25, 0x00	; 0
     974:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <left_degrees>
	receive_data = '0';
     978:	80 e3       	ldi	r24, 0x30	; 48
     97a:	80 93 74 01 	sts	0x0174, r24
	dummy1='0';
     97e:	80 e3       	ldi	r24, 0x30	; 48
     980:	80 93 76 01 	sts	0x0176, r24
	uart0_init();
     984:	0e 94 27 01 	call	0x24e	; 0x24e <uart0_init>
    }
	if(receive_data=='1')
     988:	80 91 74 01 	lds	r24, 0x0174
     98c:	81 33       	cpi	r24, 0x31	; 49
     98e:	71 f4       	brne	.+28     	; 0x9ac <main+0x252>
	{
	uart0_clr();
     990:	0e 94 81 03 	call	0x702	; 0x702 <uart0_clr>
	left_degrees(13);       
     994:	8d e0       	ldi	r24, 0x0D	; 13
     996:	90 e0       	ldi	r25, 0x00	; 0
     998:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <left_degrees>
	receive_data = '0';
     99c:	80 e3       	ldi	r24, 0x30	; 48
     99e:	80 93 74 01 	sts	0x0174, r24
	dummy1='0';
     9a2:	80 e3       	ldi	r24, 0x30	; 48
     9a4:	80 93 76 01 	sts	0x0176, r24
	uart0_init();
     9a8:	0e 94 27 01 	call	0x24e	; 0x24e <uart0_init>
    }
	
 }
 if((receive_data!= 'b'&&receive_data!= '0')&&(dummy1=='b')&&(dummy=='l'))
     9ac:	80 91 74 01 	lds	r24, 0x0174
     9b0:	82 36       	cpi	r24, 0x62	; 98
     9b2:	09 f4       	brne	.+2      	; 0x9b6 <main+0x25c>
     9b4:	43 c0       	rjmp	.+134    	; 0xa3c <main+0x2e2>
     9b6:	80 91 74 01 	lds	r24, 0x0174
     9ba:	80 33       	cpi	r24, 0x30	; 48
     9bc:	09 f4       	brne	.+2      	; 0x9c0 <main+0x266>
     9be:	3e c0       	rjmp	.+124    	; 0xa3c <main+0x2e2>
     9c0:	80 91 76 01 	lds	r24, 0x0176
     9c4:	82 36       	cpi	r24, 0x62	; 98
     9c6:	d1 f5       	brne	.+116    	; 0xa3c <main+0x2e2>
     9c8:	80 91 75 01 	lds	r24, 0x0175
     9cc:	8c 36       	cpi	r24, 0x6C	; 108
     9ce:	b1 f5       	brne	.+108    	; 0xa3c <main+0x2e2>
 {
	if(receive_data=='1')
     9d0:	80 91 74 01 	lds	r24, 0x0174
     9d4:	81 33       	cpi	r24, 0x31	; 49
     9d6:	71 f4       	brne	.+28     	; 0x9f4 <main+0x29a>
	{
	uart0_clr();
     9d8:	0e 94 81 03 	call	0x702	; 0x702 <uart0_clr>
	left_degrees(100);       
     9dc:	84 e6       	ldi	r24, 0x64	; 100
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <left_degrees>
	receive_data = '0';
     9e4:	80 e3       	ldi	r24, 0x30	; 48
     9e6:	80 93 74 01 	sts	0x0174, r24
	dummy1='0';
     9ea:	80 e3       	ldi	r24, 0x30	; 48
     9ec:	80 93 76 01 	sts	0x0176, r24
	uart0_init();
     9f0:	0e 94 27 01 	call	0x24e	; 0x24e <uart0_init>
    }
	if(receive_data=='2')
     9f4:	80 91 74 01 	lds	r24, 0x0174
     9f8:	82 33       	cpi	r24, 0x32	; 50
     9fa:	71 f4       	brne	.+28     	; 0xa18 <main+0x2be>
	{
	uart0_clr();
     9fc:	0e 94 81 03 	call	0x702	; 0x702 <uart0_clr>
	left_degrees(200);       
     a00:	88 ec       	ldi	r24, 0xC8	; 200
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <left_degrees>
	receive_data = '0';
     a08:	80 e3       	ldi	r24, 0x30	; 48
     a0a:	80 93 74 01 	sts	0x0174, r24
	dummy1='0';
     a0e:	80 e3       	ldi	r24, 0x30	; 48
     a10:	80 93 76 01 	sts	0x0176, r24
	uart0_init();
     a14:	0e 94 27 01 	call	0x24e	; 0x24e <uart0_init>
    }
	if(receive_data=='3')
     a18:	80 91 74 01 	lds	r24, 0x0174
     a1c:	83 33       	cpi	r24, 0x33	; 51
     a1e:	71 f4       	brne	.+28     	; 0xa3c <main+0x2e2>
	{
	uart0_clr();
     a20:	0e 94 81 03 	call	0x702	; 0x702 <uart0_clr>
	left_degrees(300);       
     a24:	8c e2       	ldi	r24, 0x2C	; 44
     a26:	91 e0       	ldi	r25, 0x01	; 1
     a28:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <left_degrees>
	receive_data = '0';
     a2c:	80 e3       	ldi	r24, 0x30	; 48
     a2e:	80 93 74 01 	sts	0x0174, r24
	dummy1='0';
     a32:	80 e3       	ldi	r24, 0x30	; 48
     a34:	80 93 76 01 	sts	0x0176, r24
	uart0_init();
     a38:	0e 94 27 01 	call	0x24e	; 0x24e <uart0_init>
    }
  }

if((receive_data!= 'a'&&receive_data!= '0')&&(dummy1=='a')&&(dummy=='r'))
     a3c:	80 91 74 01 	lds	r24, 0x0174
     a40:	81 36       	cpi	r24, 0x61	; 97
     a42:	09 f4       	brne	.+2      	; 0xa46 <main+0x2ec>
     a44:	b1 c0       	rjmp	.+354    	; 0xba8 <main+0x44e>
     a46:	80 91 74 01 	lds	r24, 0x0174
     a4a:	80 33       	cpi	r24, 0x30	; 48
     a4c:	09 f4       	brne	.+2      	; 0xa50 <main+0x2f6>
     a4e:	ac c0       	rjmp	.+344    	; 0xba8 <main+0x44e>
     a50:	80 91 76 01 	lds	r24, 0x0176
     a54:	81 36       	cpi	r24, 0x61	; 97
     a56:	09 f0       	breq	.+2      	; 0xa5a <main+0x300>
     a58:	a7 c0       	rjmp	.+334    	; 0xba8 <main+0x44e>
     a5a:	80 91 75 01 	lds	r24, 0x0175
     a5e:	82 37       	cpi	r24, 0x72	; 114
     a60:	09 f0       	breq	.+2      	; 0xa64 <main+0x30a>
     a62:	a2 c0       	rjmp	.+324    	; 0xba8 <main+0x44e>
 {
	if(receive_data=='9')
     a64:	80 91 74 01 	lds	r24, 0x0174
     a68:	89 33       	cpi	r24, 0x39	; 57
     a6a:	71 f4       	brne	.+28     	; 0xa88 <main+0x32e>
	{
	uart0_clr();
     a6c:	0e 94 81 03 	call	0x702	; 0x702 <uart0_clr>
	right_degrees(90);       
     a70:	8a e5       	ldi	r24, 0x5A	; 90
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	0e 94 fe 02 	call	0x5fc	; 0x5fc <right_degrees>
	receive_data = '0';
     a78:	80 e3       	ldi	r24, 0x30	; 48
     a7a:	80 93 74 01 	sts	0x0174, r24
	dummy1='0';
     a7e:	80 e3       	ldi	r24, 0x30	; 48
     a80:	80 93 76 01 	sts	0x0176, r24
	uart0_init();
     a84:	0e 94 27 01 	call	0x24e	; 0x24e <uart0_init>
    }
	if(receive_data=='8')
     a88:	80 91 74 01 	lds	r24, 0x0174
     a8c:	88 33       	cpi	r24, 0x38	; 56
     a8e:	71 f4       	brne	.+28     	; 0xaac <main+0x352>
	{
	uart0_clr();
     a90:	0e 94 81 03 	call	0x702	; 0x702 <uart0_clr>
	right_degrees(80);      
     a94:	80 e5       	ldi	r24, 0x50	; 80
     a96:	90 e0       	ldi	r25, 0x00	; 0
     a98:	0e 94 fe 02 	call	0x5fc	; 0x5fc <right_degrees>
	receive_data = '0';
     a9c:	80 e3       	ldi	r24, 0x30	; 48
     a9e:	80 93 74 01 	sts	0x0174, r24
	dummy1='0';
     aa2:	80 e3       	ldi	r24, 0x30	; 48
     aa4:	80 93 76 01 	sts	0x0176, r24
	uart0_init();
     aa8:	0e 94 27 01 	call	0x24e	; 0x24e <uart0_init>
    }
	if(receive_data=='7')
     aac:	80 91 74 01 	lds	r24, 0x0174
     ab0:	87 33       	cpi	r24, 0x37	; 55
     ab2:	71 f4       	brne	.+28     	; 0xad0 <main+0x376>
	{
	uart0_clr();
     ab4:	0e 94 81 03 	call	0x702	; 0x702 <uart0_clr>
	right_degrees(70);       
     ab8:	86 e4       	ldi	r24, 0x46	; 70
     aba:	90 e0       	ldi	r25, 0x00	; 0
     abc:	0e 94 fe 02 	call	0x5fc	; 0x5fc <right_degrees>
	receive_data = '0';
     ac0:	80 e3       	ldi	r24, 0x30	; 48
     ac2:	80 93 74 01 	sts	0x0174, r24
	dummy1='0';
     ac6:	80 e3       	ldi	r24, 0x30	; 48
     ac8:	80 93 76 01 	sts	0x0176, r24
	uart0_init();
     acc:	0e 94 27 01 	call	0x24e	; 0x24e <uart0_init>
    }
	if(receive_data=='6')
     ad0:	80 91 74 01 	lds	r24, 0x0174
     ad4:	86 33       	cpi	r24, 0x36	; 54
     ad6:	71 f4       	brne	.+28     	; 0xaf4 <main+0x39a>
	{
	uart0_clr();
     ad8:	0e 94 81 03 	call	0x702	; 0x702 <uart0_clr>
	right_degrees(60);       
     adc:	8c e3       	ldi	r24, 0x3C	; 60
     ade:	90 e0       	ldi	r25, 0x00	; 0
     ae0:	0e 94 fe 02 	call	0x5fc	; 0x5fc <right_degrees>
	receive_data = '0';
     ae4:	80 e3       	ldi	r24, 0x30	; 48
     ae6:	80 93 74 01 	sts	0x0174, r24
	dummy1='0';
     aea:	80 e3       	ldi	r24, 0x30	; 48
     aec:	80 93 76 01 	sts	0x0176, r24
	uart0_init();
     af0:	0e 94 27 01 	call	0x24e	; 0x24e <uart0_init>
    }
	if(receive_data=='5')
     af4:	80 91 74 01 	lds	r24, 0x0174
     af8:	85 33       	cpi	r24, 0x35	; 53
     afa:	71 f4       	brne	.+28     	; 0xb18 <main+0x3be>
	{
	uart0_clr();
     afc:	0e 94 81 03 	call	0x702	; 0x702 <uart0_clr>
	right_degrees(50);       
     b00:	82 e3       	ldi	r24, 0x32	; 50
     b02:	90 e0       	ldi	r25, 0x00	; 0
     b04:	0e 94 fe 02 	call	0x5fc	; 0x5fc <right_degrees>
	receive_data = '0';
     b08:	80 e3       	ldi	r24, 0x30	; 48
     b0a:	80 93 74 01 	sts	0x0174, r24
	dummy1='0';
     b0e:	80 e3       	ldi	r24, 0x30	; 48
     b10:	80 93 76 01 	sts	0x0176, r24
	uart0_init();
     b14:	0e 94 27 01 	call	0x24e	; 0x24e <uart0_init>
    }
	if(receive_data=='4')
     b18:	80 91 74 01 	lds	r24, 0x0174
     b1c:	84 33       	cpi	r24, 0x34	; 52
     b1e:	71 f4       	brne	.+28     	; 0xb3c <main+0x3e2>
	{
	uart0_clr();
     b20:	0e 94 81 03 	call	0x702	; 0x702 <uart0_clr>
	right_degrees(40);       
     b24:	88 e2       	ldi	r24, 0x28	; 40
     b26:	90 e0       	ldi	r25, 0x00	; 0
     b28:	0e 94 fe 02 	call	0x5fc	; 0x5fc <right_degrees>
	receive_data = '0';
     b2c:	80 e3       	ldi	r24, 0x30	; 48
     b2e:	80 93 74 01 	sts	0x0174, r24
	dummy1='0';
     b32:	80 e3       	ldi	r24, 0x30	; 48
     b34:	80 93 76 01 	sts	0x0176, r24
	uart0_init();
     b38:	0e 94 27 01 	call	0x24e	; 0x24e <uart0_init>
    }
	if(receive_data=='3')
     b3c:	80 91 74 01 	lds	r24, 0x0174
     b40:	83 33       	cpi	r24, 0x33	; 51
     b42:	71 f4       	brne	.+28     	; 0xb60 <main+0x406>
	{
	uart0_clr();
     b44:	0e 94 81 03 	call	0x702	; 0x702 <uart0_clr>
	right_degrees(30);      
     b48:	8e e1       	ldi	r24, 0x1E	; 30
     b4a:	90 e0       	ldi	r25, 0x00	; 0
     b4c:	0e 94 fe 02 	call	0x5fc	; 0x5fc <right_degrees>
	receive_data = '0';
     b50:	80 e3       	ldi	r24, 0x30	; 48
     b52:	80 93 74 01 	sts	0x0174, r24
	dummy1='0';
     b56:	80 e3       	ldi	r24, 0x30	; 48
     b58:	80 93 76 01 	sts	0x0176, r24
	uart0_init();
     b5c:	0e 94 27 01 	call	0x24e	; 0x24e <uart0_init>
    }
	if(receive_data=='2')
     b60:	80 91 74 01 	lds	r24, 0x0174
     b64:	82 33       	cpi	r24, 0x32	; 50
     b66:	71 f4       	brne	.+28     	; 0xb84 <main+0x42a>
	{
	uart0_clr();
     b68:	0e 94 81 03 	call	0x702	; 0x702 <uart0_clr>
	right_degrees(20);      
     b6c:	84 e1       	ldi	r24, 0x14	; 20
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	0e 94 fe 02 	call	0x5fc	; 0x5fc <right_degrees>
	receive_data = '0';
     b74:	80 e3       	ldi	r24, 0x30	; 48
     b76:	80 93 74 01 	sts	0x0174, r24
	dummy1='0';
     b7a:	80 e3       	ldi	r24, 0x30	; 48
     b7c:	80 93 76 01 	sts	0x0176, r24
	uart0_init();
     b80:	0e 94 27 01 	call	0x24e	; 0x24e <uart0_init>
    }
	if(receive_data=='1')
     b84:	80 91 74 01 	lds	r24, 0x0174
     b88:	81 33       	cpi	r24, 0x31	; 49
     b8a:	71 f4       	brne	.+28     	; 0xba8 <main+0x44e>
	{
	uart0_clr();
     b8c:	0e 94 81 03 	call	0x702	; 0x702 <uart0_clr>
	right_degrees(13);       
     b90:	8d e0       	ldi	r24, 0x0D	; 13
     b92:	90 e0       	ldi	r25, 0x00	; 0
     b94:	0e 94 fe 02 	call	0x5fc	; 0x5fc <right_degrees>
	receive_data = '0';
     b98:	80 e3       	ldi	r24, 0x30	; 48
     b9a:	80 93 74 01 	sts	0x0174, r24
	dummy1='0';
     b9e:	80 e3       	ldi	r24, 0x30	; 48
     ba0:	80 93 76 01 	sts	0x0176, r24
	uart0_init();
     ba4:	0e 94 27 01 	call	0x24e	; 0x24e <uart0_init>
    }
	
 }
 if((receive_data!= 'b'&&receive_data!= '0')&&(dummy1=='b')&&(dummy=='r'))
     ba8:	80 91 74 01 	lds	r24, 0x0174
     bac:	82 36       	cpi	r24, 0x62	; 98
     bae:	09 f4       	brne	.+2      	; 0xbb2 <main+0x458>
     bb0:	db cd       	rjmp	.-1098   	; 0x768 <main+0xe>
     bb2:	80 91 74 01 	lds	r24, 0x0174
     bb6:	80 33       	cpi	r24, 0x30	; 48
     bb8:	09 f4       	brne	.+2      	; 0xbbc <main+0x462>
     bba:	d6 cd       	rjmp	.-1108   	; 0x768 <main+0xe>
     bbc:	80 91 76 01 	lds	r24, 0x0176
     bc0:	82 36       	cpi	r24, 0x62	; 98
     bc2:	09 f0       	breq	.+2      	; 0xbc6 <main+0x46c>
     bc4:	d1 cd       	rjmp	.-1118   	; 0x768 <main+0xe>
     bc6:	80 91 75 01 	lds	r24, 0x0175
     bca:	82 37       	cpi	r24, 0x72	; 114
     bcc:	09 f0       	breq	.+2      	; 0xbd0 <main+0x476>
     bce:	cc cd       	rjmp	.-1128   	; 0x768 <main+0xe>
 {
	if(receive_data=='1')
     bd0:	80 91 74 01 	lds	r24, 0x0174
     bd4:	81 33       	cpi	r24, 0x31	; 49
     bd6:	71 f4       	brne	.+28     	; 0xbf4 <main+0x49a>
	{
	uart0_clr();
     bd8:	0e 94 81 03 	call	0x702	; 0x702 <uart0_clr>
	right_degrees(100);       
     bdc:	84 e6       	ldi	r24, 0x64	; 100
     bde:	90 e0       	ldi	r25, 0x00	; 0
     be0:	0e 94 fe 02 	call	0x5fc	; 0x5fc <right_degrees>
	receive_data = '0';
     be4:	80 e3       	ldi	r24, 0x30	; 48
     be6:	80 93 74 01 	sts	0x0174, r24
	dummy1='0';
     bea:	80 e3       	ldi	r24, 0x30	; 48
     bec:	80 93 76 01 	sts	0x0176, r24
	uart0_init();
     bf0:	0e 94 27 01 	call	0x24e	; 0x24e <uart0_init>
    }
	if(receive_data=='2')
     bf4:	80 91 74 01 	lds	r24, 0x0174
     bf8:	82 33       	cpi	r24, 0x32	; 50
     bfa:	71 f4       	brne	.+28     	; 0xc18 <main+0x4be>
	{
	uart0_clr();
     bfc:	0e 94 81 03 	call	0x702	; 0x702 <uart0_clr>
	right_degrees(200);       
     c00:	88 ec       	ldi	r24, 0xC8	; 200
     c02:	90 e0       	ldi	r25, 0x00	; 0
     c04:	0e 94 fe 02 	call	0x5fc	; 0x5fc <right_degrees>
	receive_data = '0';
     c08:	80 e3       	ldi	r24, 0x30	; 48
     c0a:	80 93 74 01 	sts	0x0174, r24
	dummy1='0';
     c0e:	80 e3       	ldi	r24, 0x30	; 48
     c10:	80 93 76 01 	sts	0x0176, r24
	uart0_init();
     c14:	0e 94 27 01 	call	0x24e	; 0x24e <uart0_init>
    }
	if(receive_data=='3')
     c18:	80 91 74 01 	lds	r24, 0x0174
     c1c:	83 33       	cpi	r24, 0x33	; 51
     c1e:	09 f0       	breq	.+2      	; 0xc22 <main+0x4c8>
     c20:	a3 cd       	rjmp	.-1210   	; 0x768 <main+0xe>
	{
	uart0_clr();
     c22:	0e 94 81 03 	call	0x702	; 0x702 <uart0_clr>
	right_degrees(300);
     c26:	8c e2       	ldi	r24, 0x2C	; 44
     c28:	91 e0       	ldi	r25, 0x01	; 1
     c2a:	0e 94 fe 02 	call	0x5fc	; 0x5fc <right_degrees>
	receive_data = '0';
     c2e:	80 e3       	ldi	r24, 0x30	; 48
     c30:	80 93 74 01 	sts	0x0174, r24
	dummy1='0';
     c34:	80 e3       	ldi	r24, 0x30	; 48
     c36:	80 93 76 01 	sts	0x0176, r24
	uart0_init();
     c3a:	0e 94 27 01 	call	0x24e	; 0x24e <uart0_init>
     c3e:	94 cd       	rjmp	.-1240   	; 0x768 <main+0xe>

00000c40 <__fixunssfsi>:
     c40:	ef 92       	push	r14
     c42:	ff 92       	push	r15
     c44:	0f 93       	push	r16
     c46:	1f 93       	push	r17
     c48:	7b 01       	movw	r14, r22
     c4a:	8c 01       	movw	r16, r24
     c4c:	20 e0       	ldi	r18, 0x00	; 0
     c4e:	30 e0       	ldi	r19, 0x00	; 0
     c50:	40 e0       	ldi	r20, 0x00	; 0
     c52:	5f e4       	ldi	r21, 0x4F	; 79
     c54:	0e 94 a2 08 	call	0x1144	; 0x1144 <__gesf2>
     c58:	88 23       	and	r24, r24
     c5a:	8c f0       	brlt	.+34     	; 0xc7e <__fixunssfsi+0x3e>
     c5c:	c8 01       	movw	r24, r16
     c5e:	b7 01       	movw	r22, r14
     c60:	20 e0       	ldi	r18, 0x00	; 0
     c62:	30 e0       	ldi	r19, 0x00	; 0
     c64:	40 e0       	ldi	r20, 0x00	; 0
     c66:	5f e4       	ldi	r21, 0x4F	; 79
     c68:	0e 94 98 07 	call	0xf30	; 0xf30 <__subsf3>
     c6c:	0e 94 d2 08 	call	0x11a4	; 0x11a4 <__fixsfsi>
     c70:	9b 01       	movw	r18, r22
     c72:	ac 01       	movw	r20, r24
     c74:	20 50       	subi	r18, 0x00	; 0
     c76:	30 40       	sbci	r19, 0x00	; 0
     c78:	40 40       	sbci	r20, 0x00	; 0
     c7a:	50 48       	sbci	r21, 0x80	; 128
     c7c:	06 c0       	rjmp	.+12     	; 0xc8a <__fixunssfsi+0x4a>
     c7e:	c8 01       	movw	r24, r16
     c80:	b7 01       	movw	r22, r14
     c82:	0e 94 d2 08 	call	0x11a4	; 0x11a4 <__fixsfsi>
     c86:	9b 01       	movw	r18, r22
     c88:	ac 01       	movw	r20, r24
     c8a:	b9 01       	movw	r22, r18
     c8c:	ca 01       	movw	r24, r20
     c8e:	1f 91       	pop	r17
     c90:	0f 91       	pop	r16
     c92:	ff 90       	pop	r15
     c94:	ef 90       	pop	r14
     c96:	08 95       	ret

00000c98 <_fpadd_parts>:
     c98:	a0 e0       	ldi	r26, 0x00	; 0
     c9a:	b0 e0       	ldi	r27, 0x00	; 0
     c9c:	e2 e5       	ldi	r30, 0x52	; 82
     c9e:	f6 e0       	ldi	r31, 0x06	; 6
     ca0:	0c 94 1c 0c 	jmp	0x1838	; 0x1838 <__prologue_saves__>
     ca4:	dc 01       	movw	r26, r24
     ca6:	2b 01       	movw	r4, r22
     ca8:	fa 01       	movw	r30, r20
     caa:	9c 91       	ld	r25, X
     cac:	92 30       	cpi	r25, 0x02	; 2
     cae:	08 f4       	brcc	.+2      	; 0xcb2 <_fpadd_parts+0x1a>
     cb0:	39 c1       	rjmp	.+626    	; 0xf24 <_fpadd_parts+0x28c>
     cb2:	eb 01       	movw	r28, r22
     cb4:	88 81       	ld	r24, Y
     cb6:	82 30       	cpi	r24, 0x02	; 2
     cb8:	08 f4       	brcc	.+2      	; 0xcbc <_fpadd_parts+0x24>
     cba:	33 c1       	rjmp	.+614    	; 0xf22 <_fpadd_parts+0x28a>
     cbc:	94 30       	cpi	r25, 0x04	; 4
     cbe:	69 f4       	brne	.+26     	; 0xcda <_fpadd_parts+0x42>
     cc0:	84 30       	cpi	r24, 0x04	; 4
     cc2:	09 f0       	breq	.+2      	; 0xcc6 <_fpadd_parts+0x2e>
     cc4:	2f c1       	rjmp	.+606    	; 0xf24 <_fpadd_parts+0x28c>
     cc6:	11 96       	adiw	r26, 0x01	; 1
     cc8:	9c 91       	ld	r25, X
     cca:	11 97       	sbiw	r26, 0x01	; 1
     ccc:	89 81       	ldd	r24, Y+1	; 0x01
     cce:	98 17       	cp	r25, r24
     cd0:	09 f4       	brne	.+2      	; 0xcd4 <_fpadd_parts+0x3c>
     cd2:	28 c1       	rjmp	.+592    	; 0xf24 <_fpadd_parts+0x28c>
     cd4:	a0 e6       	ldi	r26, 0x60	; 96
     cd6:	b0 e0       	ldi	r27, 0x00	; 0
     cd8:	25 c1       	rjmp	.+586    	; 0xf24 <_fpadd_parts+0x28c>
     cda:	84 30       	cpi	r24, 0x04	; 4
     cdc:	09 f4       	brne	.+2      	; 0xce0 <_fpadd_parts+0x48>
     cde:	21 c1       	rjmp	.+578    	; 0xf22 <_fpadd_parts+0x28a>
     ce0:	82 30       	cpi	r24, 0x02	; 2
     ce2:	a9 f4       	brne	.+42     	; 0xd0e <_fpadd_parts+0x76>
     ce4:	92 30       	cpi	r25, 0x02	; 2
     ce6:	09 f0       	breq	.+2      	; 0xcea <_fpadd_parts+0x52>
     ce8:	1d c1       	rjmp	.+570    	; 0xf24 <_fpadd_parts+0x28c>
     cea:	9a 01       	movw	r18, r20
     cec:	ad 01       	movw	r20, r26
     cee:	88 e0       	ldi	r24, 0x08	; 8
     cf0:	ea 01       	movw	r28, r20
     cf2:	09 90       	ld	r0, Y+
     cf4:	ae 01       	movw	r20, r28
     cf6:	e9 01       	movw	r28, r18
     cf8:	09 92       	st	Y+, r0
     cfa:	9e 01       	movw	r18, r28
     cfc:	81 50       	subi	r24, 0x01	; 1
     cfe:	c1 f7       	brne	.-16     	; 0xcf0 <_fpadd_parts+0x58>
     d00:	e2 01       	movw	r28, r4
     d02:	89 81       	ldd	r24, Y+1	; 0x01
     d04:	11 96       	adiw	r26, 0x01	; 1
     d06:	9c 91       	ld	r25, X
     d08:	89 23       	and	r24, r25
     d0a:	81 83       	std	Z+1, r24	; 0x01
     d0c:	08 c1       	rjmp	.+528    	; 0xf1e <_fpadd_parts+0x286>
     d0e:	92 30       	cpi	r25, 0x02	; 2
     d10:	09 f4       	brne	.+2      	; 0xd14 <_fpadd_parts+0x7c>
     d12:	07 c1       	rjmp	.+526    	; 0xf22 <_fpadd_parts+0x28a>
     d14:	12 96       	adiw	r26, 0x02	; 2
     d16:	2d 90       	ld	r2, X+
     d18:	3c 90       	ld	r3, X
     d1a:	13 97       	sbiw	r26, 0x03	; 3
     d1c:	eb 01       	movw	r28, r22
     d1e:	8a 81       	ldd	r24, Y+2	; 0x02
     d20:	9b 81       	ldd	r25, Y+3	; 0x03
     d22:	14 96       	adiw	r26, 0x04	; 4
     d24:	ad 90       	ld	r10, X+
     d26:	bd 90       	ld	r11, X+
     d28:	cd 90       	ld	r12, X+
     d2a:	dc 90       	ld	r13, X
     d2c:	17 97       	sbiw	r26, 0x07	; 7
     d2e:	ec 80       	ldd	r14, Y+4	; 0x04
     d30:	fd 80       	ldd	r15, Y+5	; 0x05
     d32:	0e 81       	ldd	r16, Y+6	; 0x06
     d34:	1f 81       	ldd	r17, Y+7	; 0x07
     d36:	91 01       	movw	r18, r2
     d38:	28 1b       	sub	r18, r24
     d3a:	39 0b       	sbc	r19, r25
     d3c:	b9 01       	movw	r22, r18
     d3e:	37 ff       	sbrs	r19, 7
     d40:	04 c0       	rjmp	.+8      	; 0xd4a <_fpadd_parts+0xb2>
     d42:	66 27       	eor	r22, r22
     d44:	77 27       	eor	r23, r23
     d46:	62 1b       	sub	r22, r18
     d48:	73 0b       	sbc	r23, r19
     d4a:	60 32       	cpi	r22, 0x20	; 32
     d4c:	71 05       	cpc	r23, r1
     d4e:	0c f0       	brlt	.+2      	; 0xd52 <_fpadd_parts+0xba>
     d50:	61 c0       	rjmp	.+194    	; 0xe14 <_fpadd_parts+0x17c>
     d52:	12 16       	cp	r1, r18
     d54:	13 06       	cpc	r1, r19
     d56:	6c f5       	brge	.+90     	; 0xdb2 <_fpadd_parts+0x11a>
     d58:	37 01       	movw	r6, r14
     d5a:	48 01       	movw	r8, r16
     d5c:	06 2e       	mov	r0, r22
     d5e:	04 c0       	rjmp	.+8      	; 0xd68 <_fpadd_parts+0xd0>
     d60:	96 94       	lsr	r9
     d62:	87 94       	ror	r8
     d64:	77 94       	ror	r7
     d66:	67 94       	ror	r6
     d68:	0a 94       	dec	r0
     d6a:	d2 f7       	brpl	.-12     	; 0xd60 <_fpadd_parts+0xc8>
     d6c:	21 e0       	ldi	r18, 0x01	; 1
     d6e:	30 e0       	ldi	r19, 0x00	; 0
     d70:	40 e0       	ldi	r20, 0x00	; 0
     d72:	50 e0       	ldi	r21, 0x00	; 0
     d74:	04 c0       	rjmp	.+8      	; 0xd7e <_fpadd_parts+0xe6>
     d76:	22 0f       	add	r18, r18
     d78:	33 1f       	adc	r19, r19
     d7a:	44 1f       	adc	r20, r20
     d7c:	55 1f       	adc	r21, r21
     d7e:	6a 95       	dec	r22
     d80:	d2 f7       	brpl	.-12     	; 0xd76 <_fpadd_parts+0xde>
     d82:	21 50       	subi	r18, 0x01	; 1
     d84:	30 40       	sbci	r19, 0x00	; 0
     d86:	40 40       	sbci	r20, 0x00	; 0
     d88:	50 40       	sbci	r21, 0x00	; 0
     d8a:	2e 21       	and	r18, r14
     d8c:	3f 21       	and	r19, r15
     d8e:	40 23       	and	r20, r16
     d90:	51 23       	and	r21, r17
     d92:	21 15       	cp	r18, r1
     d94:	31 05       	cpc	r19, r1
     d96:	41 05       	cpc	r20, r1
     d98:	51 05       	cpc	r21, r1
     d9a:	21 f0       	breq	.+8      	; 0xda4 <_fpadd_parts+0x10c>
     d9c:	21 e0       	ldi	r18, 0x01	; 1
     d9e:	30 e0       	ldi	r19, 0x00	; 0
     da0:	40 e0       	ldi	r20, 0x00	; 0
     da2:	50 e0       	ldi	r21, 0x00	; 0
     da4:	79 01       	movw	r14, r18
     da6:	8a 01       	movw	r16, r20
     da8:	e6 28       	or	r14, r6
     daa:	f7 28       	or	r15, r7
     dac:	08 29       	or	r16, r8
     dae:	19 29       	or	r17, r9
     db0:	3c c0       	rjmp	.+120    	; 0xe2a <_fpadd_parts+0x192>
     db2:	23 2b       	or	r18, r19
     db4:	d1 f1       	breq	.+116    	; 0xe2a <_fpadd_parts+0x192>
     db6:	26 0e       	add	r2, r22
     db8:	37 1e       	adc	r3, r23
     dba:	35 01       	movw	r6, r10
     dbc:	46 01       	movw	r8, r12
     dbe:	06 2e       	mov	r0, r22
     dc0:	04 c0       	rjmp	.+8      	; 0xdca <_fpadd_parts+0x132>
     dc2:	96 94       	lsr	r9
     dc4:	87 94       	ror	r8
     dc6:	77 94       	ror	r7
     dc8:	67 94       	ror	r6
     dca:	0a 94       	dec	r0
     dcc:	d2 f7       	brpl	.-12     	; 0xdc2 <_fpadd_parts+0x12a>
     dce:	21 e0       	ldi	r18, 0x01	; 1
     dd0:	30 e0       	ldi	r19, 0x00	; 0
     dd2:	40 e0       	ldi	r20, 0x00	; 0
     dd4:	50 e0       	ldi	r21, 0x00	; 0
     dd6:	04 c0       	rjmp	.+8      	; 0xde0 <_fpadd_parts+0x148>
     dd8:	22 0f       	add	r18, r18
     dda:	33 1f       	adc	r19, r19
     ddc:	44 1f       	adc	r20, r20
     dde:	55 1f       	adc	r21, r21
     de0:	6a 95       	dec	r22
     de2:	d2 f7       	brpl	.-12     	; 0xdd8 <_fpadd_parts+0x140>
     de4:	21 50       	subi	r18, 0x01	; 1
     de6:	30 40       	sbci	r19, 0x00	; 0
     de8:	40 40       	sbci	r20, 0x00	; 0
     dea:	50 40       	sbci	r21, 0x00	; 0
     dec:	2a 21       	and	r18, r10
     dee:	3b 21       	and	r19, r11
     df0:	4c 21       	and	r20, r12
     df2:	5d 21       	and	r21, r13
     df4:	21 15       	cp	r18, r1
     df6:	31 05       	cpc	r19, r1
     df8:	41 05       	cpc	r20, r1
     dfa:	51 05       	cpc	r21, r1
     dfc:	21 f0       	breq	.+8      	; 0xe06 <_fpadd_parts+0x16e>
     dfe:	21 e0       	ldi	r18, 0x01	; 1
     e00:	30 e0       	ldi	r19, 0x00	; 0
     e02:	40 e0       	ldi	r20, 0x00	; 0
     e04:	50 e0       	ldi	r21, 0x00	; 0
     e06:	59 01       	movw	r10, r18
     e08:	6a 01       	movw	r12, r20
     e0a:	a6 28       	or	r10, r6
     e0c:	b7 28       	or	r11, r7
     e0e:	c8 28       	or	r12, r8
     e10:	d9 28       	or	r13, r9
     e12:	0b c0       	rjmp	.+22     	; 0xe2a <_fpadd_parts+0x192>
     e14:	82 15       	cp	r24, r2
     e16:	93 05       	cpc	r25, r3
     e18:	2c f0       	brlt	.+10     	; 0xe24 <_fpadd_parts+0x18c>
     e1a:	1c 01       	movw	r2, r24
     e1c:	aa 24       	eor	r10, r10
     e1e:	bb 24       	eor	r11, r11
     e20:	65 01       	movw	r12, r10
     e22:	03 c0       	rjmp	.+6      	; 0xe2a <_fpadd_parts+0x192>
     e24:	ee 24       	eor	r14, r14
     e26:	ff 24       	eor	r15, r15
     e28:	87 01       	movw	r16, r14
     e2a:	11 96       	adiw	r26, 0x01	; 1
     e2c:	9c 91       	ld	r25, X
     e2e:	d2 01       	movw	r26, r4
     e30:	11 96       	adiw	r26, 0x01	; 1
     e32:	8c 91       	ld	r24, X
     e34:	98 17       	cp	r25, r24
     e36:	09 f4       	brne	.+2      	; 0xe3a <_fpadd_parts+0x1a2>
     e38:	45 c0       	rjmp	.+138    	; 0xec4 <_fpadd_parts+0x22c>
     e3a:	99 23       	and	r25, r25
     e3c:	39 f0       	breq	.+14     	; 0xe4c <_fpadd_parts+0x1b4>
     e3e:	a8 01       	movw	r20, r16
     e40:	97 01       	movw	r18, r14
     e42:	2a 19       	sub	r18, r10
     e44:	3b 09       	sbc	r19, r11
     e46:	4c 09       	sbc	r20, r12
     e48:	5d 09       	sbc	r21, r13
     e4a:	06 c0       	rjmp	.+12     	; 0xe58 <_fpadd_parts+0x1c0>
     e4c:	a6 01       	movw	r20, r12
     e4e:	95 01       	movw	r18, r10
     e50:	2e 19       	sub	r18, r14
     e52:	3f 09       	sbc	r19, r15
     e54:	40 0b       	sbc	r20, r16
     e56:	51 0b       	sbc	r21, r17
     e58:	57 fd       	sbrc	r21, 7
     e5a:	08 c0       	rjmp	.+16     	; 0xe6c <_fpadd_parts+0x1d4>
     e5c:	11 82       	std	Z+1, r1	; 0x01
     e5e:	33 82       	std	Z+3, r3	; 0x03
     e60:	22 82       	std	Z+2, r2	; 0x02
     e62:	24 83       	std	Z+4, r18	; 0x04
     e64:	35 83       	std	Z+5, r19	; 0x05
     e66:	46 83       	std	Z+6, r20	; 0x06
     e68:	57 83       	std	Z+7, r21	; 0x07
     e6a:	1d c0       	rjmp	.+58     	; 0xea6 <_fpadd_parts+0x20e>
     e6c:	81 e0       	ldi	r24, 0x01	; 1
     e6e:	81 83       	std	Z+1, r24	; 0x01
     e70:	33 82       	std	Z+3, r3	; 0x03
     e72:	22 82       	std	Z+2, r2	; 0x02
     e74:	88 27       	eor	r24, r24
     e76:	99 27       	eor	r25, r25
     e78:	dc 01       	movw	r26, r24
     e7a:	82 1b       	sub	r24, r18
     e7c:	93 0b       	sbc	r25, r19
     e7e:	a4 0b       	sbc	r26, r20
     e80:	b5 0b       	sbc	r27, r21
     e82:	84 83       	std	Z+4, r24	; 0x04
     e84:	95 83       	std	Z+5, r25	; 0x05
     e86:	a6 83       	std	Z+6, r26	; 0x06
     e88:	b7 83       	std	Z+7, r27	; 0x07
     e8a:	0d c0       	rjmp	.+26     	; 0xea6 <_fpadd_parts+0x20e>
     e8c:	22 0f       	add	r18, r18
     e8e:	33 1f       	adc	r19, r19
     e90:	44 1f       	adc	r20, r20
     e92:	55 1f       	adc	r21, r21
     e94:	24 83       	std	Z+4, r18	; 0x04
     e96:	35 83       	std	Z+5, r19	; 0x05
     e98:	46 83       	std	Z+6, r20	; 0x06
     e9a:	57 83       	std	Z+7, r21	; 0x07
     e9c:	82 81       	ldd	r24, Z+2	; 0x02
     e9e:	93 81       	ldd	r25, Z+3	; 0x03
     ea0:	01 97       	sbiw	r24, 0x01	; 1
     ea2:	93 83       	std	Z+3, r25	; 0x03
     ea4:	82 83       	std	Z+2, r24	; 0x02
     ea6:	24 81       	ldd	r18, Z+4	; 0x04
     ea8:	35 81       	ldd	r19, Z+5	; 0x05
     eaa:	46 81       	ldd	r20, Z+6	; 0x06
     eac:	57 81       	ldd	r21, Z+7	; 0x07
     eae:	da 01       	movw	r26, r20
     eb0:	c9 01       	movw	r24, r18
     eb2:	01 97       	sbiw	r24, 0x01	; 1
     eb4:	a1 09       	sbc	r26, r1
     eb6:	b1 09       	sbc	r27, r1
     eb8:	8f 5f       	subi	r24, 0xFF	; 255
     eba:	9f 4f       	sbci	r25, 0xFF	; 255
     ebc:	af 4f       	sbci	r26, 0xFF	; 255
     ebe:	bf 43       	sbci	r27, 0x3F	; 63
     ec0:	28 f3       	brcs	.-54     	; 0xe8c <_fpadd_parts+0x1f4>
     ec2:	0b c0       	rjmp	.+22     	; 0xeda <_fpadd_parts+0x242>
     ec4:	91 83       	std	Z+1, r25	; 0x01
     ec6:	33 82       	std	Z+3, r3	; 0x03
     ec8:	22 82       	std	Z+2, r2	; 0x02
     eca:	ea 0c       	add	r14, r10
     ecc:	fb 1c       	adc	r15, r11
     ece:	0c 1d       	adc	r16, r12
     ed0:	1d 1d       	adc	r17, r13
     ed2:	e4 82       	std	Z+4, r14	; 0x04
     ed4:	f5 82       	std	Z+5, r15	; 0x05
     ed6:	06 83       	std	Z+6, r16	; 0x06
     ed8:	17 83       	std	Z+7, r17	; 0x07
     eda:	83 e0       	ldi	r24, 0x03	; 3
     edc:	80 83       	st	Z, r24
     ede:	24 81       	ldd	r18, Z+4	; 0x04
     ee0:	35 81       	ldd	r19, Z+5	; 0x05
     ee2:	46 81       	ldd	r20, Z+6	; 0x06
     ee4:	57 81       	ldd	r21, Z+7	; 0x07
     ee6:	57 ff       	sbrs	r21, 7
     ee8:	1a c0       	rjmp	.+52     	; 0xf1e <_fpadd_parts+0x286>
     eea:	c9 01       	movw	r24, r18
     eec:	aa 27       	eor	r26, r26
     eee:	97 fd       	sbrc	r25, 7
     ef0:	a0 95       	com	r26
     ef2:	ba 2f       	mov	r27, r26
     ef4:	81 70       	andi	r24, 0x01	; 1
     ef6:	90 70       	andi	r25, 0x00	; 0
     ef8:	a0 70       	andi	r26, 0x00	; 0
     efa:	b0 70       	andi	r27, 0x00	; 0
     efc:	56 95       	lsr	r21
     efe:	47 95       	ror	r20
     f00:	37 95       	ror	r19
     f02:	27 95       	ror	r18
     f04:	82 2b       	or	r24, r18
     f06:	93 2b       	or	r25, r19
     f08:	a4 2b       	or	r26, r20
     f0a:	b5 2b       	or	r27, r21
     f0c:	84 83       	std	Z+4, r24	; 0x04
     f0e:	95 83       	std	Z+5, r25	; 0x05
     f10:	a6 83       	std	Z+6, r26	; 0x06
     f12:	b7 83       	std	Z+7, r27	; 0x07
     f14:	82 81       	ldd	r24, Z+2	; 0x02
     f16:	93 81       	ldd	r25, Z+3	; 0x03
     f18:	01 96       	adiw	r24, 0x01	; 1
     f1a:	93 83       	std	Z+3, r25	; 0x03
     f1c:	82 83       	std	Z+2, r24	; 0x02
     f1e:	df 01       	movw	r26, r30
     f20:	01 c0       	rjmp	.+2      	; 0xf24 <_fpadd_parts+0x28c>
     f22:	d2 01       	movw	r26, r4
     f24:	cd 01       	movw	r24, r26
     f26:	cd b7       	in	r28, 0x3d	; 61
     f28:	de b7       	in	r29, 0x3e	; 62
     f2a:	e2 e1       	ldi	r30, 0x12	; 18
     f2c:	0c 94 38 0c 	jmp	0x1870	; 0x1870 <__epilogue_restores__>

00000f30 <__subsf3>:
     f30:	a0 e2       	ldi	r26, 0x20	; 32
     f32:	b0 e0       	ldi	r27, 0x00	; 0
     f34:	ee e9       	ldi	r30, 0x9E	; 158
     f36:	f7 e0       	ldi	r31, 0x07	; 7
     f38:	0c 94 28 0c 	jmp	0x1850	; 0x1850 <__prologue_saves__+0x18>
     f3c:	69 83       	std	Y+1, r22	; 0x01
     f3e:	7a 83       	std	Y+2, r23	; 0x02
     f40:	8b 83       	std	Y+3, r24	; 0x03
     f42:	9c 83       	std	Y+4, r25	; 0x04
     f44:	2d 83       	std	Y+5, r18	; 0x05
     f46:	3e 83       	std	Y+6, r19	; 0x06
     f48:	4f 83       	std	Y+7, r20	; 0x07
     f4a:	58 87       	std	Y+8, r21	; 0x08
     f4c:	e9 e0       	ldi	r30, 0x09	; 9
     f4e:	ee 2e       	mov	r14, r30
     f50:	f1 2c       	mov	r15, r1
     f52:	ec 0e       	add	r14, r28
     f54:	fd 1e       	adc	r15, r29
     f56:	ce 01       	movw	r24, r28
     f58:	01 96       	adiw	r24, 0x01	; 1
     f5a:	b7 01       	movw	r22, r14
     f5c:	0e 94 c3 0a 	call	0x1586	; 0x1586 <__unpack_f>
     f60:	8e 01       	movw	r16, r28
     f62:	0f 5e       	subi	r16, 0xEF	; 239
     f64:	1f 4f       	sbci	r17, 0xFF	; 255
     f66:	ce 01       	movw	r24, r28
     f68:	05 96       	adiw	r24, 0x05	; 5
     f6a:	b8 01       	movw	r22, r16
     f6c:	0e 94 c3 0a 	call	0x1586	; 0x1586 <__unpack_f>
     f70:	8a 89       	ldd	r24, Y+18	; 0x12
     f72:	91 e0       	ldi	r25, 0x01	; 1
     f74:	89 27       	eor	r24, r25
     f76:	8a 8b       	std	Y+18, r24	; 0x12
     f78:	c7 01       	movw	r24, r14
     f7a:	b8 01       	movw	r22, r16
     f7c:	ae 01       	movw	r20, r28
     f7e:	47 5e       	subi	r20, 0xE7	; 231
     f80:	5f 4f       	sbci	r21, 0xFF	; 255
     f82:	0e 94 4c 06 	call	0xc98	; 0xc98 <_fpadd_parts>
     f86:	0e 94 ee 09 	call	0x13dc	; 0x13dc <__pack_f>
     f8a:	a0 96       	adiw	r28, 0x20	; 32
     f8c:	e6 e0       	ldi	r30, 0x06	; 6
     f8e:	0c 94 44 0c 	jmp	0x1888	; 0x1888 <__epilogue_restores__+0x18>

00000f92 <__addsf3>:
     f92:	a0 e2       	ldi	r26, 0x20	; 32
     f94:	b0 e0       	ldi	r27, 0x00	; 0
     f96:	ef ec       	ldi	r30, 0xCF	; 207
     f98:	f7 e0       	ldi	r31, 0x07	; 7
     f9a:	0c 94 28 0c 	jmp	0x1850	; 0x1850 <__prologue_saves__+0x18>
     f9e:	69 83       	std	Y+1, r22	; 0x01
     fa0:	7a 83       	std	Y+2, r23	; 0x02
     fa2:	8b 83       	std	Y+3, r24	; 0x03
     fa4:	9c 83       	std	Y+4, r25	; 0x04
     fa6:	2d 83       	std	Y+5, r18	; 0x05
     fa8:	3e 83       	std	Y+6, r19	; 0x06
     faa:	4f 83       	std	Y+7, r20	; 0x07
     fac:	58 87       	std	Y+8, r21	; 0x08
     fae:	f9 e0       	ldi	r31, 0x09	; 9
     fb0:	ef 2e       	mov	r14, r31
     fb2:	f1 2c       	mov	r15, r1
     fb4:	ec 0e       	add	r14, r28
     fb6:	fd 1e       	adc	r15, r29
     fb8:	ce 01       	movw	r24, r28
     fba:	01 96       	adiw	r24, 0x01	; 1
     fbc:	b7 01       	movw	r22, r14
     fbe:	0e 94 c3 0a 	call	0x1586	; 0x1586 <__unpack_f>
     fc2:	8e 01       	movw	r16, r28
     fc4:	0f 5e       	subi	r16, 0xEF	; 239
     fc6:	1f 4f       	sbci	r17, 0xFF	; 255
     fc8:	ce 01       	movw	r24, r28
     fca:	05 96       	adiw	r24, 0x05	; 5
     fcc:	b8 01       	movw	r22, r16
     fce:	0e 94 c3 0a 	call	0x1586	; 0x1586 <__unpack_f>
     fd2:	c7 01       	movw	r24, r14
     fd4:	b8 01       	movw	r22, r16
     fd6:	ae 01       	movw	r20, r28
     fd8:	47 5e       	subi	r20, 0xE7	; 231
     fda:	5f 4f       	sbci	r21, 0xFF	; 255
     fdc:	0e 94 4c 06 	call	0xc98	; 0xc98 <_fpadd_parts>
     fe0:	0e 94 ee 09 	call	0x13dc	; 0x13dc <__pack_f>
     fe4:	a0 96       	adiw	r28, 0x20	; 32
     fe6:	e6 e0       	ldi	r30, 0x06	; 6
     fe8:	0c 94 44 0c 	jmp	0x1888	; 0x1888 <__epilogue_restores__+0x18>

00000fec <__divsf3>:
     fec:	a8 e1       	ldi	r26, 0x18	; 24
     fee:	b0 e0       	ldi	r27, 0x00	; 0
     ff0:	ec ef       	ldi	r30, 0xFC	; 252
     ff2:	f7 e0       	ldi	r31, 0x07	; 7
     ff4:	0c 94 24 0c 	jmp	0x1848	; 0x1848 <__prologue_saves__+0x10>
     ff8:	69 83       	std	Y+1, r22	; 0x01
     ffa:	7a 83       	std	Y+2, r23	; 0x02
     ffc:	8b 83       	std	Y+3, r24	; 0x03
     ffe:	9c 83       	std	Y+4, r25	; 0x04
    1000:	2d 83       	std	Y+5, r18	; 0x05
    1002:	3e 83       	std	Y+6, r19	; 0x06
    1004:	4f 83       	std	Y+7, r20	; 0x07
    1006:	58 87       	std	Y+8, r21	; 0x08
    1008:	b9 e0       	ldi	r27, 0x09	; 9
    100a:	eb 2e       	mov	r14, r27
    100c:	f1 2c       	mov	r15, r1
    100e:	ec 0e       	add	r14, r28
    1010:	fd 1e       	adc	r15, r29
    1012:	ce 01       	movw	r24, r28
    1014:	01 96       	adiw	r24, 0x01	; 1
    1016:	b7 01       	movw	r22, r14
    1018:	0e 94 c3 0a 	call	0x1586	; 0x1586 <__unpack_f>
    101c:	8e 01       	movw	r16, r28
    101e:	0f 5e       	subi	r16, 0xEF	; 239
    1020:	1f 4f       	sbci	r17, 0xFF	; 255
    1022:	ce 01       	movw	r24, r28
    1024:	05 96       	adiw	r24, 0x05	; 5
    1026:	b8 01       	movw	r22, r16
    1028:	0e 94 c3 0a 	call	0x1586	; 0x1586 <__unpack_f>
    102c:	29 85       	ldd	r18, Y+9	; 0x09
    102e:	22 30       	cpi	r18, 0x02	; 2
    1030:	08 f4       	brcc	.+2      	; 0x1034 <__divsf3+0x48>
    1032:	7e c0       	rjmp	.+252    	; 0x1130 <__divsf3+0x144>
    1034:	39 89       	ldd	r19, Y+17	; 0x11
    1036:	32 30       	cpi	r19, 0x02	; 2
    1038:	10 f4       	brcc	.+4      	; 0x103e <__divsf3+0x52>
    103a:	b8 01       	movw	r22, r16
    103c:	7c c0       	rjmp	.+248    	; 0x1136 <__divsf3+0x14a>
    103e:	8a 85       	ldd	r24, Y+10	; 0x0a
    1040:	9a 89       	ldd	r25, Y+18	; 0x12
    1042:	89 27       	eor	r24, r25
    1044:	8a 87       	std	Y+10, r24	; 0x0a
    1046:	24 30       	cpi	r18, 0x04	; 4
    1048:	11 f0       	breq	.+4      	; 0x104e <__divsf3+0x62>
    104a:	22 30       	cpi	r18, 0x02	; 2
    104c:	31 f4       	brne	.+12     	; 0x105a <__divsf3+0x6e>
    104e:	23 17       	cp	r18, r19
    1050:	09 f0       	breq	.+2      	; 0x1054 <__divsf3+0x68>
    1052:	6e c0       	rjmp	.+220    	; 0x1130 <__divsf3+0x144>
    1054:	60 e6       	ldi	r22, 0x60	; 96
    1056:	70 e0       	ldi	r23, 0x00	; 0
    1058:	6e c0       	rjmp	.+220    	; 0x1136 <__divsf3+0x14a>
    105a:	34 30       	cpi	r19, 0x04	; 4
    105c:	39 f4       	brne	.+14     	; 0x106c <__divsf3+0x80>
    105e:	1d 86       	std	Y+13, r1	; 0x0d
    1060:	1e 86       	std	Y+14, r1	; 0x0e
    1062:	1f 86       	std	Y+15, r1	; 0x0f
    1064:	18 8a       	std	Y+16, r1	; 0x10
    1066:	1c 86       	std	Y+12, r1	; 0x0c
    1068:	1b 86       	std	Y+11, r1	; 0x0b
    106a:	04 c0       	rjmp	.+8      	; 0x1074 <__divsf3+0x88>
    106c:	32 30       	cpi	r19, 0x02	; 2
    106e:	21 f4       	brne	.+8      	; 0x1078 <__divsf3+0x8c>
    1070:	84 e0       	ldi	r24, 0x04	; 4
    1072:	89 87       	std	Y+9, r24	; 0x09
    1074:	b7 01       	movw	r22, r14
    1076:	5f c0       	rjmp	.+190    	; 0x1136 <__divsf3+0x14a>
    1078:	2b 85       	ldd	r18, Y+11	; 0x0b
    107a:	3c 85       	ldd	r19, Y+12	; 0x0c
    107c:	8b 89       	ldd	r24, Y+19	; 0x13
    107e:	9c 89       	ldd	r25, Y+20	; 0x14
    1080:	28 1b       	sub	r18, r24
    1082:	39 0b       	sbc	r19, r25
    1084:	3c 87       	std	Y+12, r19	; 0x0c
    1086:	2b 87       	std	Y+11, r18	; 0x0b
    1088:	ed 84       	ldd	r14, Y+13	; 0x0d
    108a:	fe 84       	ldd	r15, Y+14	; 0x0e
    108c:	0f 85       	ldd	r16, Y+15	; 0x0f
    108e:	18 89       	ldd	r17, Y+16	; 0x10
    1090:	ad 88       	ldd	r10, Y+21	; 0x15
    1092:	be 88       	ldd	r11, Y+22	; 0x16
    1094:	cf 88       	ldd	r12, Y+23	; 0x17
    1096:	d8 8c       	ldd	r13, Y+24	; 0x18
    1098:	ea 14       	cp	r14, r10
    109a:	fb 04       	cpc	r15, r11
    109c:	0c 05       	cpc	r16, r12
    109e:	1d 05       	cpc	r17, r13
    10a0:	40 f4       	brcc	.+16     	; 0x10b2 <__divsf3+0xc6>
    10a2:	ee 0c       	add	r14, r14
    10a4:	ff 1c       	adc	r15, r15
    10a6:	00 1f       	adc	r16, r16
    10a8:	11 1f       	adc	r17, r17
    10aa:	21 50       	subi	r18, 0x01	; 1
    10ac:	30 40       	sbci	r19, 0x00	; 0
    10ae:	3c 87       	std	Y+12, r19	; 0x0c
    10b0:	2b 87       	std	Y+11, r18	; 0x0b
    10b2:	20 e0       	ldi	r18, 0x00	; 0
    10b4:	30 e0       	ldi	r19, 0x00	; 0
    10b6:	40 e0       	ldi	r20, 0x00	; 0
    10b8:	50 e0       	ldi	r21, 0x00	; 0
    10ba:	80 e0       	ldi	r24, 0x00	; 0
    10bc:	90 e0       	ldi	r25, 0x00	; 0
    10be:	a0 e0       	ldi	r26, 0x00	; 0
    10c0:	b0 e4       	ldi	r27, 0x40	; 64
    10c2:	60 e0       	ldi	r22, 0x00	; 0
    10c4:	70 e0       	ldi	r23, 0x00	; 0
    10c6:	ea 14       	cp	r14, r10
    10c8:	fb 04       	cpc	r15, r11
    10ca:	0c 05       	cpc	r16, r12
    10cc:	1d 05       	cpc	r17, r13
    10ce:	40 f0       	brcs	.+16     	; 0x10e0 <__divsf3+0xf4>
    10d0:	28 2b       	or	r18, r24
    10d2:	39 2b       	or	r19, r25
    10d4:	4a 2b       	or	r20, r26
    10d6:	5b 2b       	or	r21, r27
    10d8:	ea 18       	sub	r14, r10
    10da:	fb 08       	sbc	r15, r11
    10dc:	0c 09       	sbc	r16, r12
    10de:	1d 09       	sbc	r17, r13
    10e0:	b6 95       	lsr	r27
    10e2:	a7 95       	ror	r26
    10e4:	97 95       	ror	r25
    10e6:	87 95       	ror	r24
    10e8:	ee 0c       	add	r14, r14
    10ea:	ff 1c       	adc	r15, r15
    10ec:	00 1f       	adc	r16, r16
    10ee:	11 1f       	adc	r17, r17
    10f0:	6f 5f       	subi	r22, 0xFF	; 255
    10f2:	7f 4f       	sbci	r23, 0xFF	; 255
    10f4:	6f 31       	cpi	r22, 0x1F	; 31
    10f6:	71 05       	cpc	r23, r1
    10f8:	31 f7       	brne	.-52     	; 0x10c6 <__divsf3+0xda>
    10fa:	da 01       	movw	r26, r20
    10fc:	c9 01       	movw	r24, r18
    10fe:	8f 77       	andi	r24, 0x7F	; 127
    1100:	90 70       	andi	r25, 0x00	; 0
    1102:	a0 70       	andi	r26, 0x00	; 0
    1104:	b0 70       	andi	r27, 0x00	; 0
    1106:	80 34       	cpi	r24, 0x40	; 64
    1108:	91 05       	cpc	r25, r1
    110a:	a1 05       	cpc	r26, r1
    110c:	b1 05       	cpc	r27, r1
    110e:	61 f4       	brne	.+24     	; 0x1128 <__divsf3+0x13c>
    1110:	27 fd       	sbrc	r18, 7
    1112:	0a c0       	rjmp	.+20     	; 0x1128 <__divsf3+0x13c>
    1114:	e1 14       	cp	r14, r1
    1116:	f1 04       	cpc	r15, r1
    1118:	01 05       	cpc	r16, r1
    111a:	11 05       	cpc	r17, r1
    111c:	29 f0       	breq	.+10     	; 0x1128 <__divsf3+0x13c>
    111e:	20 5c       	subi	r18, 0xC0	; 192
    1120:	3f 4f       	sbci	r19, 0xFF	; 255
    1122:	4f 4f       	sbci	r20, 0xFF	; 255
    1124:	5f 4f       	sbci	r21, 0xFF	; 255
    1126:	20 78       	andi	r18, 0x80	; 128
    1128:	2d 87       	std	Y+13, r18	; 0x0d
    112a:	3e 87       	std	Y+14, r19	; 0x0e
    112c:	4f 87       	std	Y+15, r20	; 0x0f
    112e:	58 8b       	std	Y+16, r21	; 0x10
    1130:	be 01       	movw	r22, r28
    1132:	67 5f       	subi	r22, 0xF7	; 247
    1134:	7f 4f       	sbci	r23, 0xFF	; 255
    1136:	cb 01       	movw	r24, r22
    1138:	0e 94 ee 09 	call	0x13dc	; 0x13dc <__pack_f>
    113c:	68 96       	adiw	r28, 0x18	; 24
    113e:	ea e0       	ldi	r30, 0x0A	; 10
    1140:	0c 94 40 0c 	jmp	0x1880	; 0x1880 <__epilogue_restores__+0x10>

00001144 <__gesf2>:
    1144:	a8 e1       	ldi	r26, 0x18	; 24
    1146:	b0 e0       	ldi	r27, 0x00	; 0
    1148:	e8 ea       	ldi	r30, 0xA8	; 168
    114a:	f8 e0       	ldi	r31, 0x08	; 8
    114c:	0c 94 28 0c 	jmp	0x1850	; 0x1850 <__prologue_saves__+0x18>
    1150:	69 83       	std	Y+1, r22	; 0x01
    1152:	7a 83       	std	Y+2, r23	; 0x02
    1154:	8b 83       	std	Y+3, r24	; 0x03
    1156:	9c 83       	std	Y+4, r25	; 0x04
    1158:	2d 83       	std	Y+5, r18	; 0x05
    115a:	3e 83       	std	Y+6, r19	; 0x06
    115c:	4f 83       	std	Y+7, r20	; 0x07
    115e:	58 87       	std	Y+8, r21	; 0x08
    1160:	89 e0       	ldi	r24, 0x09	; 9
    1162:	e8 2e       	mov	r14, r24
    1164:	f1 2c       	mov	r15, r1
    1166:	ec 0e       	add	r14, r28
    1168:	fd 1e       	adc	r15, r29
    116a:	ce 01       	movw	r24, r28
    116c:	01 96       	adiw	r24, 0x01	; 1
    116e:	b7 01       	movw	r22, r14
    1170:	0e 94 c3 0a 	call	0x1586	; 0x1586 <__unpack_f>
    1174:	8e 01       	movw	r16, r28
    1176:	0f 5e       	subi	r16, 0xEF	; 239
    1178:	1f 4f       	sbci	r17, 0xFF	; 255
    117a:	ce 01       	movw	r24, r28
    117c:	05 96       	adiw	r24, 0x05	; 5
    117e:	b8 01       	movw	r22, r16
    1180:	0e 94 c3 0a 	call	0x1586	; 0x1586 <__unpack_f>
    1184:	89 85       	ldd	r24, Y+9	; 0x09
    1186:	82 30       	cpi	r24, 0x02	; 2
    1188:	40 f0       	brcs	.+16     	; 0x119a <__gesf2+0x56>
    118a:	89 89       	ldd	r24, Y+17	; 0x11
    118c:	82 30       	cpi	r24, 0x02	; 2
    118e:	28 f0       	brcs	.+10     	; 0x119a <__gesf2+0x56>
    1190:	c7 01       	movw	r24, r14
    1192:	b8 01       	movw	r22, r16
    1194:	0e 94 3b 0b 	call	0x1676	; 0x1676 <__fpcmp_parts_f>
    1198:	01 c0       	rjmp	.+2      	; 0x119c <__gesf2+0x58>
    119a:	8f ef       	ldi	r24, 0xFF	; 255
    119c:	68 96       	adiw	r28, 0x18	; 24
    119e:	e6 e0       	ldi	r30, 0x06	; 6
    11a0:	0c 94 44 0c 	jmp	0x1888	; 0x1888 <__epilogue_restores__+0x18>

000011a4 <__fixsfsi>:
    11a4:	ac e0       	ldi	r26, 0x0C	; 12
    11a6:	b0 e0       	ldi	r27, 0x00	; 0
    11a8:	e8 ed       	ldi	r30, 0xD8	; 216
    11aa:	f8 e0       	ldi	r31, 0x08	; 8
    11ac:	0c 94 2c 0c 	jmp	0x1858	; 0x1858 <__prologue_saves__+0x20>
    11b0:	69 83       	std	Y+1, r22	; 0x01
    11b2:	7a 83       	std	Y+2, r23	; 0x02
    11b4:	8b 83       	std	Y+3, r24	; 0x03
    11b6:	9c 83       	std	Y+4, r25	; 0x04
    11b8:	ce 01       	movw	r24, r28
    11ba:	01 96       	adiw	r24, 0x01	; 1
    11bc:	be 01       	movw	r22, r28
    11be:	6b 5f       	subi	r22, 0xFB	; 251
    11c0:	7f 4f       	sbci	r23, 0xFF	; 255
    11c2:	0e 94 c3 0a 	call	0x1586	; 0x1586 <__unpack_f>
    11c6:	8d 81       	ldd	r24, Y+5	; 0x05
    11c8:	82 30       	cpi	r24, 0x02	; 2
    11ca:	61 f1       	breq	.+88     	; 0x1224 <__fixsfsi+0x80>
    11cc:	82 30       	cpi	r24, 0x02	; 2
    11ce:	50 f1       	brcs	.+84     	; 0x1224 <__fixsfsi+0x80>
    11d0:	84 30       	cpi	r24, 0x04	; 4
    11d2:	21 f4       	brne	.+8      	; 0x11dc <__fixsfsi+0x38>
    11d4:	8e 81       	ldd	r24, Y+6	; 0x06
    11d6:	88 23       	and	r24, r24
    11d8:	51 f1       	breq	.+84     	; 0x122e <__fixsfsi+0x8a>
    11da:	2e c0       	rjmp	.+92     	; 0x1238 <__fixsfsi+0x94>
    11dc:	2f 81       	ldd	r18, Y+7	; 0x07
    11de:	38 85       	ldd	r19, Y+8	; 0x08
    11e0:	37 fd       	sbrc	r19, 7
    11e2:	20 c0       	rjmp	.+64     	; 0x1224 <__fixsfsi+0x80>
    11e4:	6e 81       	ldd	r22, Y+6	; 0x06
    11e6:	2f 31       	cpi	r18, 0x1F	; 31
    11e8:	31 05       	cpc	r19, r1
    11ea:	1c f0       	brlt	.+6      	; 0x11f2 <__fixsfsi+0x4e>
    11ec:	66 23       	and	r22, r22
    11ee:	f9 f0       	breq	.+62     	; 0x122e <__fixsfsi+0x8a>
    11f0:	23 c0       	rjmp	.+70     	; 0x1238 <__fixsfsi+0x94>
    11f2:	8e e1       	ldi	r24, 0x1E	; 30
    11f4:	90 e0       	ldi	r25, 0x00	; 0
    11f6:	82 1b       	sub	r24, r18
    11f8:	93 0b       	sbc	r25, r19
    11fa:	29 85       	ldd	r18, Y+9	; 0x09
    11fc:	3a 85       	ldd	r19, Y+10	; 0x0a
    11fe:	4b 85       	ldd	r20, Y+11	; 0x0b
    1200:	5c 85       	ldd	r21, Y+12	; 0x0c
    1202:	04 c0       	rjmp	.+8      	; 0x120c <__fixsfsi+0x68>
    1204:	56 95       	lsr	r21
    1206:	47 95       	ror	r20
    1208:	37 95       	ror	r19
    120a:	27 95       	ror	r18
    120c:	8a 95       	dec	r24
    120e:	d2 f7       	brpl	.-12     	; 0x1204 <__fixsfsi+0x60>
    1210:	66 23       	and	r22, r22
    1212:	b1 f0       	breq	.+44     	; 0x1240 <__fixsfsi+0x9c>
    1214:	50 95       	com	r21
    1216:	40 95       	com	r20
    1218:	30 95       	com	r19
    121a:	21 95       	neg	r18
    121c:	3f 4f       	sbci	r19, 0xFF	; 255
    121e:	4f 4f       	sbci	r20, 0xFF	; 255
    1220:	5f 4f       	sbci	r21, 0xFF	; 255
    1222:	0e c0       	rjmp	.+28     	; 0x1240 <__fixsfsi+0x9c>
    1224:	20 e0       	ldi	r18, 0x00	; 0
    1226:	30 e0       	ldi	r19, 0x00	; 0
    1228:	40 e0       	ldi	r20, 0x00	; 0
    122a:	50 e0       	ldi	r21, 0x00	; 0
    122c:	09 c0       	rjmp	.+18     	; 0x1240 <__fixsfsi+0x9c>
    122e:	2f ef       	ldi	r18, 0xFF	; 255
    1230:	3f ef       	ldi	r19, 0xFF	; 255
    1232:	4f ef       	ldi	r20, 0xFF	; 255
    1234:	5f e7       	ldi	r21, 0x7F	; 127
    1236:	04 c0       	rjmp	.+8      	; 0x1240 <__fixsfsi+0x9c>
    1238:	20 e0       	ldi	r18, 0x00	; 0
    123a:	30 e0       	ldi	r19, 0x00	; 0
    123c:	40 e0       	ldi	r20, 0x00	; 0
    123e:	50 e8       	ldi	r21, 0x80	; 128
    1240:	b9 01       	movw	r22, r18
    1242:	ca 01       	movw	r24, r20
    1244:	2c 96       	adiw	r28, 0x0c	; 12
    1246:	e2 e0       	ldi	r30, 0x02	; 2
    1248:	0c 94 48 0c 	jmp	0x1890	; 0x1890 <__epilogue_restores__+0x20>

0000124c <__floatunsisf>:
    124c:	a8 e0       	ldi	r26, 0x08	; 8
    124e:	b0 e0       	ldi	r27, 0x00	; 0
    1250:	ec e2       	ldi	r30, 0x2C	; 44
    1252:	f9 e0       	ldi	r31, 0x09	; 9
    1254:	0c 94 24 0c 	jmp	0x1848	; 0x1848 <__prologue_saves__+0x10>
    1258:	7b 01       	movw	r14, r22
    125a:	8c 01       	movw	r16, r24
    125c:	61 15       	cp	r22, r1
    125e:	71 05       	cpc	r23, r1
    1260:	81 05       	cpc	r24, r1
    1262:	91 05       	cpc	r25, r1
    1264:	19 f4       	brne	.+6      	; 0x126c <__floatunsisf+0x20>
    1266:	82 e0       	ldi	r24, 0x02	; 2
    1268:	89 83       	std	Y+1, r24	; 0x01
    126a:	60 c0       	rjmp	.+192    	; 0x132c <__floatunsisf+0xe0>
    126c:	83 e0       	ldi	r24, 0x03	; 3
    126e:	89 83       	std	Y+1, r24	; 0x01
    1270:	8e e1       	ldi	r24, 0x1E	; 30
    1272:	c8 2e       	mov	r12, r24
    1274:	d1 2c       	mov	r13, r1
    1276:	dc 82       	std	Y+4, r13	; 0x04
    1278:	cb 82       	std	Y+3, r12	; 0x03
    127a:	ed 82       	std	Y+5, r14	; 0x05
    127c:	fe 82       	std	Y+6, r15	; 0x06
    127e:	0f 83       	std	Y+7, r16	; 0x07
    1280:	18 87       	std	Y+8, r17	; 0x08
    1282:	c8 01       	movw	r24, r16
    1284:	b7 01       	movw	r22, r14
    1286:	0e 94 9f 09 	call	0x133e	; 0x133e <__clzsi2>
    128a:	fc 01       	movw	r30, r24
    128c:	31 97       	sbiw	r30, 0x01	; 1
    128e:	f7 ff       	sbrs	r31, 7
    1290:	3b c0       	rjmp	.+118    	; 0x1308 <__floatunsisf+0xbc>
    1292:	22 27       	eor	r18, r18
    1294:	33 27       	eor	r19, r19
    1296:	2e 1b       	sub	r18, r30
    1298:	3f 0b       	sbc	r19, r31
    129a:	57 01       	movw	r10, r14
    129c:	68 01       	movw	r12, r16
    129e:	02 2e       	mov	r0, r18
    12a0:	04 c0       	rjmp	.+8      	; 0x12aa <__floatunsisf+0x5e>
    12a2:	d6 94       	lsr	r13
    12a4:	c7 94       	ror	r12
    12a6:	b7 94       	ror	r11
    12a8:	a7 94       	ror	r10
    12aa:	0a 94       	dec	r0
    12ac:	d2 f7       	brpl	.-12     	; 0x12a2 <__floatunsisf+0x56>
    12ae:	40 e0       	ldi	r20, 0x00	; 0
    12b0:	50 e0       	ldi	r21, 0x00	; 0
    12b2:	60 e0       	ldi	r22, 0x00	; 0
    12b4:	70 e0       	ldi	r23, 0x00	; 0
    12b6:	81 e0       	ldi	r24, 0x01	; 1
    12b8:	90 e0       	ldi	r25, 0x00	; 0
    12ba:	a0 e0       	ldi	r26, 0x00	; 0
    12bc:	b0 e0       	ldi	r27, 0x00	; 0
    12be:	04 c0       	rjmp	.+8      	; 0x12c8 <__floatunsisf+0x7c>
    12c0:	88 0f       	add	r24, r24
    12c2:	99 1f       	adc	r25, r25
    12c4:	aa 1f       	adc	r26, r26
    12c6:	bb 1f       	adc	r27, r27
    12c8:	2a 95       	dec	r18
    12ca:	d2 f7       	brpl	.-12     	; 0x12c0 <__floatunsisf+0x74>
    12cc:	01 97       	sbiw	r24, 0x01	; 1
    12ce:	a1 09       	sbc	r26, r1
    12d0:	b1 09       	sbc	r27, r1
    12d2:	8e 21       	and	r24, r14
    12d4:	9f 21       	and	r25, r15
    12d6:	a0 23       	and	r26, r16
    12d8:	b1 23       	and	r27, r17
    12da:	00 97       	sbiw	r24, 0x00	; 0
    12dc:	a1 05       	cpc	r26, r1
    12de:	b1 05       	cpc	r27, r1
    12e0:	21 f0       	breq	.+8      	; 0x12ea <__floatunsisf+0x9e>
    12e2:	41 e0       	ldi	r20, 0x01	; 1
    12e4:	50 e0       	ldi	r21, 0x00	; 0
    12e6:	60 e0       	ldi	r22, 0x00	; 0
    12e8:	70 e0       	ldi	r23, 0x00	; 0
    12ea:	4a 29       	or	r20, r10
    12ec:	5b 29       	or	r21, r11
    12ee:	6c 29       	or	r22, r12
    12f0:	7d 29       	or	r23, r13
    12f2:	4d 83       	std	Y+5, r20	; 0x05
    12f4:	5e 83       	std	Y+6, r21	; 0x06
    12f6:	6f 83       	std	Y+7, r22	; 0x07
    12f8:	78 87       	std	Y+8, r23	; 0x08
    12fa:	8e e1       	ldi	r24, 0x1E	; 30
    12fc:	90 e0       	ldi	r25, 0x00	; 0
    12fe:	8e 1b       	sub	r24, r30
    1300:	9f 0b       	sbc	r25, r31
    1302:	9c 83       	std	Y+4, r25	; 0x04
    1304:	8b 83       	std	Y+3, r24	; 0x03
    1306:	12 c0       	rjmp	.+36     	; 0x132c <__floatunsisf+0xe0>
    1308:	30 97       	sbiw	r30, 0x00	; 0
    130a:	81 f0       	breq	.+32     	; 0x132c <__floatunsisf+0xe0>
    130c:	0e 2e       	mov	r0, r30
    130e:	04 c0       	rjmp	.+8      	; 0x1318 <__floatunsisf+0xcc>
    1310:	ee 0c       	add	r14, r14
    1312:	ff 1c       	adc	r15, r15
    1314:	00 1f       	adc	r16, r16
    1316:	11 1f       	adc	r17, r17
    1318:	0a 94       	dec	r0
    131a:	d2 f7       	brpl	.-12     	; 0x1310 <__floatunsisf+0xc4>
    131c:	ed 82       	std	Y+5, r14	; 0x05
    131e:	fe 82       	std	Y+6, r15	; 0x06
    1320:	0f 83       	std	Y+7, r16	; 0x07
    1322:	18 87       	std	Y+8, r17	; 0x08
    1324:	ce 1a       	sub	r12, r30
    1326:	df 0a       	sbc	r13, r31
    1328:	dc 82       	std	Y+4, r13	; 0x04
    132a:	cb 82       	std	Y+3, r12	; 0x03
    132c:	1a 82       	std	Y+2, r1	; 0x02
    132e:	ce 01       	movw	r24, r28
    1330:	01 96       	adiw	r24, 0x01	; 1
    1332:	0e 94 ee 09 	call	0x13dc	; 0x13dc <__pack_f>
    1336:	28 96       	adiw	r28, 0x08	; 8
    1338:	ea e0       	ldi	r30, 0x0A	; 10
    133a:	0c 94 40 0c 	jmp	0x1880	; 0x1880 <__epilogue_restores__+0x10>

0000133e <__clzsi2>:
    133e:	ef 92       	push	r14
    1340:	ff 92       	push	r15
    1342:	0f 93       	push	r16
    1344:	1f 93       	push	r17
    1346:	7b 01       	movw	r14, r22
    1348:	8c 01       	movw	r16, r24
    134a:	80 e0       	ldi	r24, 0x00	; 0
    134c:	e8 16       	cp	r14, r24
    134e:	80 e0       	ldi	r24, 0x00	; 0
    1350:	f8 06       	cpc	r15, r24
    1352:	81 e0       	ldi	r24, 0x01	; 1
    1354:	08 07       	cpc	r16, r24
    1356:	80 e0       	ldi	r24, 0x00	; 0
    1358:	18 07       	cpc	r17, r24
    135a:	88 f4       	brcc	.+34     	; 0x137e <__clzsi2+0x40>
    135c:	8f ef       	ldi	r24, 0xFF	; 255
    135e:	e8 16       	cp	r14, r24
    1360:	f1 04       	cpc	r15, r1
    1362:	01 05       	cpc	r16, r1
    1364:	11 05       	cpc	r17, r1
    1366:	31 f0       	breq	.+12     	; 0x1374 <__clzsi2+0x36>
    1368:	28 f0       	brcs	.+10     	; 0x1374 <__clzsi2+0x36>
    136a:	88 e0       	ldi	r24, 0x08	; 8
    136c:	90 e0       	ldi	r25, 0x00	; 0
    136e:	a0 e0       	ldi	r26, 0x00	; 0
    1370:	b0 e0       	ldi	r27, 0x00	; 0
    1372:	17 c0       	rjmp	.+46     	; 0x13a2 <__clzsi2+0x64>
    1374:	80 e0       	ldi	r24, 0x00	; 0
    1376:	90 e0       	ldi	r25, 0x00	; 0
    1378:	a0 e0       	ldi	r26, 0x00	; 0
    137a:	b0 e0       	ldi	r27, 0x00	; 0
    137c:	12 c0       	rjmp	.+36     	; 0x13a2 <__clzsi2+0x64>
    137e:	80 e0       	ldi	r24, 0x00	; 0
    1380:	e8 16       	cp	r14, r24
    1382:	80 e0       	ldi	r24, 0x00	; 0
    1384:	f8 06       	cpc	r15, r24
    1386:	80 e0       	ldi	r24, 0x00	; 0
    1388:	08 07       	cpc	r16, r24
    138a:	81 e0       	ldi	r24, 0x01	; 1
    138c:	18 07       	cpc	r17, r24
    138e:	28 f0       	brcs	.+10     	; 0x139a <__clzsi2+0x5c>
    1390:	88 e1       	ldi	r24, 0x18	; 24
    1392:	90 e0       	ldi	r25, 0x00	; 0
    1394:	a0 e0       	ldi	r26, 0x00	; 0
    1396:	b0 e0       	ldi	r27, 0x00	; 0
    1398:	04 c0       	rjmp	.+8      	; 0x13a2 <__clzsi2+0x64>
    139a:	80 e1       	ldi	r24, 0x10	; 16
    139c:	90 e0       	ldi	r25, 0x00	; 0
    139e:	a0 e0       	ldi	r26, 0x00	; 0
    13a0:	b0 e0       	ldi	r27, 0x00	; 0
    13a2:	20 e2       	ldi	r18, 0x20	; 32
    13a4:	30 e0       	ldi	r19, 0x00	; 0
    13a6:	40 e0       	ldi	r20, 0x00	; 0
    13a8:	50 e0       	ldi	r21, 0x00	; 0
    13aa:	28 1b       	sub	r18, r24
    13ac:	39 0b       	sbc	r19, r25
    13ae:	4a 0b       	sbc	r20, r26
    13b0:	5b 0b       	sbc	r21, r27
    13b2:	04 c0       	rjmp	.+8      	; 0x13bc <__clzsi2+0x7e>
    13b4:	16 95       	lsr	r17
    13b6:	07 95       	ror	r16
    13b8:	f7 94       	ror	r15
    13ba:	e7 94       	ror	r14
    13bc:	8a 95       	dec	r24
    13be:	d2 f7       	brpl	.-12     	; 0x13b4 <__clzsi2+0x76>
    13c0:	f7 01       	movw	r30, r14
    13c2:	e8 59       	subi	r30, 0x98	; 152
    13c4:	ff 4f       	sbci	r31, 0xFF	; 255
    13c6:	80 81       	ld	r24, Z
    13c8:	28 1b       	sub	r18, r24
    13ca:	31 09       	sbc	r19, r1
    13cc:	41 09       	sbc	r20, r1
    13ce:	51 09       	sbc	r21, r1
    13d0:	c9 01       	movw	r24, r18
    13d2:	1f 91       	pop	r17
    13d4:	0f 91       	pop	r16
    13d6:	ff 90       	pop	r15
    13d8:	ef 90       	pop	r14
    13da:	08 95       	ret

000013dc <__pack_f>:
    13dc:	df 92       	push	r13
    13de:	ef 92       	push	r14
    13e0:	ff 92       	push	r15
    13e2:	0f 93       	push	r16
    13e4:	1f 93       	push	r17
    13e6:	fc 01       	movw	r30, r24
    13e8:	e4 80       	ldd	r14, Z+4	; 0x04
    13ea:	f5 80       	ldd	r15, Z+5	; 0x05
    13ec:	06 81       	ldd	r16, Z+6	; 0x06
    13ee:	17 81       	ldd	r17, Z+7	; 0x07
    13f0:	d1 80       	ldd	r13, Z+1	; 0x01
    13f2:	80 81       	ld	r24, Z
    13f4:	82 30       	cpi	r24, 0x02	; 2
    13f6:	48 f4       	brcc	.+18     	; 0x140a <__pack_f+0x2e>
    13f8:	80 e0       	ldi	r24, 0x00	; 0
    13fa:	90 e0       	ldi	r25, 0x00	; 0
    13fc:	a0 e1       	ldi	r26, 0x10	; 16
    13fe:	b0 e0       	ldi	r27, 0x00	; 0
    1400:	e8 2a       	or	r14, r24
    1402:	f9 2a       	or	r15, r25
    1404:	0a 2b       	or	r16, r26
    1406:	1b 2b       	or	r17, r27
    1408:	a5 c0       	rjmp	.+330    	; 0x1554 <__pack_f+0x178>
    140a:	84 30       	cpi	r24, 0x04	; 4
    140c:	09 f4       	brne	.+2      	; 0x1410 <__pack_f+0x34>
    140e:	9f c0       	rjmp	.+318    	; 0x154e <__pack_f+0x172>
    1410:	82 30       	cpi	r24, 0x02	; 2
    1412:	21 f4       	brne	.+8      	; 0x141c <__pack_f+0x40>
    1414:	ee 24       	eor	r14, r14
    1416:	ff 24       	eor	r15, r15
    1418:	87 01       	movw	r16, r14
    141a:	05 c0       	rjmp	.+10     	; 0x1426 <__pack_f+0x4a>
    141c:	e1 14       	cp	r14, r1
    141e:	f1 04       	cpc	r15, r1
    1420:	01 05       	cpc	r16, r1
    1422:	11 05       	cpc	r17, r1
    1424:	19 f4       	brne	.+6      	; 0x142c <__pack_f+0x50>
    1426:	e0 e0       	ldi	r30, 0x00	; 0
    1428:	f0 e0       	ldi	r31, 0x00	; 0
    142a:	96 c0       	rjmp	.+300    	; 0x1558 <__pack_f+0x17c>
    142c:	62 81       	ldd	r22, Z+2	; 0x02
    142e:	73 81       	ldd	r23, Z+3	; 0x03
    1430:	9f ef       	ldi	r25, 0xFF	; 255
    1432:	62 38       	cpi	r22, 0x82	; 130
    1434:	79 07       	cpc	r23, r25
    1436:	0c f0       	brlt	.+2      	; 0x143a <__pack_f+0x5e>
    1438:	5b c0       	rjmp	.+182    	; 0x14f0 <__pack_f+0x114>
    143a:	22 e8       	ldi	r18, 0x82	; 130
    143c:	3f ef       	ldi	r19, 0xFF	; 255
    143e:	26 1b       	sub	r18, r22
    1440:	37 0b       	sbc	r19, r23
    1442:	2a 31       	cpi	r18, 0x1A	; 26
    1444:	31 05       	cpc	r19, r1
    1446:	2c f0       	brlt	.+10     	; 0x1452 <__pack_f+0x76>
    1448:	20 e0       	ldi	r18, 0x00	; 0
    144a:	30 e0       	ldi	r19, 0x00	; 0
    144c:	40 e0       	ldi	r20, 0x00	; 0
    144e:	50 e0       	ldi	r21, 0x00	; 0
    1450:	2a c0       	rjmp	.+84     	; 0x14a6 <__pack_f+0xca>
    1452:	b8 01       	movw	r22, r16
    1454:	a7 01       	movw	r20, r14
    1456:	02 2e       	mov	r0, r18
    1458:	04 c0       	rjmp	.+8      	; 0x1462 <__pack_f+0x86>
    145a:	76 95       	lsr	r23
    145c:	67 95       	ror	r22
    145e:	57 95       	ror	r21
    1460:	47 95       	ror	r20
    1462:	0a 94       	dec	r0
    1464:	d2 f7       	brpl	.-12     	; 0x145a <__pack_f+0x7e>
    1466:	81 e0       	ldi	r24, 0x01	; 1
    1468:	90 e0       	ldi	r25, 0x00	; 0
    146a:	a0 e0       	ldi	r26, 0x00	; 0
    146c:	b0 e0       	ldi	r27, 0x00	; 0
    146e:	04 c0       	rjmp	.+8      	; 0x1478 <__pack_f+0x9c>
    1470:	88 0f       	add	r24, r24
    1472:	99 1f       	adc	r25, r25
    1474:	aa 1f       	adc	r26, r26
    1476:	bb 1f       	adc	r27, r27
    1478:	2a 95       	dec	r18
    147a:	d2 f7       	brpl	.-12     	; 0x1470 <__pack_f+0x94>
    147c:	01 97       	sbiw	r24, 0x01	; 1
    147e:	a1 09       	sbc	r26, r1
    1480:	b1 09       	sbc	r27, r1
    1482:	8e 21       	and	r24, r14
    1484:	9f 21       	and	r25, r15
    1486:	a0 23       	and	r26, r16
    1488:	b1 23       	and	r27, r17
    148a:	00 97       	sbiw	r24, 0x00	; 0
    148c:	a1 05       	cpc	r26, r1
    148e:	b1 05       	cpc	r27, r1
    1490:	21 f0       	breq	.+8      	; 0x149a <__pack_f+0xbe>
    1492:	81 e0       	ldi	r24, 0x01	; 1
    1494:	90 e0       	ldi	r25, 0x00	; 0
    1496:	a0 e0       	ldi	r26, 0x00	; 0
    1498:	b0 e0       	ldi	r27, 0x00	; 0
    149a:	9a 01       	movw	r18, r20
    149c:	ab 01       	movw	r20, r22
    149e:	28 2b       	or	r18, r24
    14a0:	39 2b       	or	r19, r25
    14a2:	4a 2b       	or	r20, r26
    14a4:	5b 2b       	or	r21, r27
    14a6:	da 01       	movw	r26, r20
    14a8:	c9 01       	movw	r24, r18
    14aa:	8f 77       	andi	r24, 0x7F	; 127
    14ac:	90 70       	andi	r25, 0x00	; 0
    14ae:	a0 70       	andi	r26, 0x00	; 0
    14b0:	b0 70       	andi	r27, 0x00	; 0
    14b2:	80 34       	cpi	r24, 0x40	; 64
    14b4:	91 05       	cpc	r25, r1
    14b6:	a1 05       	cpc	r26, r1
    14b8:	b1 05       	cpc	r27, r1
    14ba:	39 f4       	brne	.+14     	; 0x14ca <__pack_f+0xee>
    14bc:	27 ff       	sbrs	r18, 7
    14be:	09 c0       	rjmp	.+18     	; 0x14d2 <__pack_f+0xf6>
    14c0:	20 5c       	subi	r18, 0xC0	; 192
    14c2:	3f 4f       	sbci	r19, 0xFF	; 255
    14c4:	4f 4f       	sbci	r20, 0xFF	; 255
    14c6:	5f 4f       	sbci	r21, 0xFF	; 255
    14c8:	04 c0       	rjmp	.+8      	; 0x14d2 <__pack_f+0xf6>
    14ca:	21 5c       	subi	r18, 0xC1	; 193
    14cc:	3f 4f       	sbci	r19, 0xFF	; 255
    14ce:	4f 4f       	sbci	r20, 0xFF	; 255
    14d0:	5f 4f       	sbci	r21, 0xFF	; 255
    14d2:	e0 e0       	ldi	r30, 0x00	; 0
    14d4:	f0 e0       	ldi	r31, 0x00	; 0
    14d6:	20 30       	cpi	r18, 0x00	; 0
    14d8:	a0 e0       	ldi	r26, 0x00	; 0
    14da:	3a 07       	cpc	r19, r26
    14dc:	a0 e0       	ldi	r26, 0x00	; 0
    14de:	4a 07       	cpc	r20, r26
    14e0:	a0 e4       	ldi	r26, 0x40	; 64
    14e2:	5a 07       	cpc	r21, r26
    14e4:	10 f0       	brcs	.+4      	; 0x14ea <__pack_f+0x10e>
    14e6:	e1 e0       	ldi	r30, 0x01	; 1
    14e8:	f0 e0       	ldi	r31, 0x00	; 0
    14ea:	79 01       	movw	r14, r18
    14ec:	8a 01       	movw	r16, r20
    14ee:	27 c0       	rjmp	.+78     	; 0x153e <__pack_f+0x162>
    14f0:	60 38       	cpi	r22, 0x80	; 128
    14f2:	71 05       	cpc	r23, r1
    14f4:	64 f5       	brge	.+88     	; 0x154e <__pack_f+0x172>
    14f6:	fb 01       	movw	r30, r22
    14f8:	e1 58       	subi	r30, 0x81	; 129
    14fa:	ff 4f       	sbci	r31, 0xFF	; 255
    14fc:	d8 01       	movw	r26, r16
    14fe:	c7 01       	movw	r24, r14
    1500:	8f 77       	andi	r24, 0x7F	; 127
    1502:	90 70       	andi	r25, 0x00	; 0
    1504:	a0 70       	andi	r26, 0x00	; 0
    1506:	b0 70       	andi	r27, 0x00	; 0
    1508:	80 34       	cpi	r24, 0x40	; 64
    150a:	91 05       	cpc	r25, r1
    150c:	a1 05       	cpc	r26, r1
    150e:	b1 05       	cpc	r27, r1
    1510:	39 f4       	brne	.+14     	; 0x1520 <__pack_f+0x144>
    1512:	e7 fe       	sbrs	r14, 7
    1514:	0d c0       	rjmp	.+26     	; 0x1530 <__pack_f+0x154>
    1516:	80 e4       	ldi	r24, 0x40	; 64
    1518:	90 e0       	ldi	r25, 0x00	; 0
    151a:	a0 e0       	ldi	r26, 0x00	; 0
    151c:	b0 e0       	ldi	r27, 0x00	; 0
    151e:	04 c0       	rjmp	.+8      	; 0x1528 <__pack_f+0x14c>
    1520:	8f e3       	ldi	r24, 0x3F	; 63
    1522:	90 e0       	ldi	r25, 0x00	; 0
    1524:	a0 e0       	ldi	r26, 0x00	; 0
    1526:	b0 e0       	ldi	r27, 0x00	; 0
    1528:	e8 0e       	add	r14, r24
    152a:	f9 1e       	adc	r15, r25
    152c:	0a 1f       	adc	r16, r26
    152e:	1b 1f       	adc	r17, r27
    1530:	17 ff       	sbrs	r17, 7
    1532:	05 c0       	rjmp	.+10     	; 0x153e <__pack_f+0x162>
    1534:	16 95       	lsr	r17
    1536:	07 95       	ror	r16
    1538:	f7 94       	ror	r15
    153a:	e7 94       	ror	r14
    153c:	31 96       	adiw	r30, 0x01	; 1
    153e:	87 e0       	ldi	r24, 0x07	; 7
    1540:	16 95       	lsr	r17
    1542:	07 95       	ror	r16
    1544:	f7 94       	ror	r15
    1546:	e7 94       	ror	r14
    1548:	8a 95       	dec	r24
    154a:	d1 f7       	brne	.-12     	; 0x1540 <__pack_f+0x164>
    154c:	05 c0       	rjmp	.+10     	; 0x1558 <__pack_f+0x17c>
    154e:	ee 24       	eor	r14, r14
    1550:	ff 24       	eor	r15, r15
    1552:	87 01       	movw	r16, r14
    1554:	ef ef       	ldi	r30, 0xFF	; 255
    1556:	f0 e0       	ldi	r31, 0x00	; 0
    1558:	6e 2f       	mov	r22, r30
    155a:	67 95       	ror	r22
    155c:	66 27       	eor	r22, r22
    155e:	67 95       	ror	r22
    1560:	90 2f       	mov	r25, r16
    1562:	9f 77       	andi	r25, 0x7F	; 127
    1564:	d7 94       	ror	r13
    1566:	dd 24       	eor	r13, r13
    1568:	d7 94       	ror	r13
    156a:	8e 2f       	mov	r24, r30
    156c:	86 95       	lsr	r24
    156e:	49 2f       	mov	r20, r25
    1570:	46 2b       	or	r20, r22
    1572:	58 2f       	mov	r21, r24
    1574:	5d 29       	or	r21, r13
    1576:	b7 01       	movw	r22, r14
    1578:	ca 01       	movw	r24, r20
    157a:	1f 91       	pop	r17
    157c:	0f 91       	pop	r16
    157e:	ff 90       	pop	r15
    1580:	ef 90       	pop	r14
    1582:	df 90       	pop	r13
    1584:	08 95       	ret

00001586 <__unpack_f>:
    1586:	fc 01       	movw	r30, r24
    1588:	db 01       	movw	r26, r22
    158a:	40 81       	ld	r20, Z
    158c:	51 81       	ldd	r21, Z+1	; 0x01
    158e:	22 81       	ldd	r18, Z+2	; 0x02
    1590:	62 2f       	mov	r22, r18
    1592:	6f 77       	andi	r22, 0x7F	; 127
    1594:	70 e0       	ldi	r23, 0x00	; 0
    1596:	22 1f       	adc	r18, r18
    1598:	22 27       	eor	r18, r18
    159a:	22 1f       	adc	r18, r18
    159c:	93 81       	ldd	r25, Z+3	; 0x03
    159e:	89 2f       	mov	r24, r25
    15a0:	88 0f       	add	r24, r24
    15a2:	82 2b       	or	r24, r18
    15a4:	28 2f       	mov	r18, r24
    15a6:	30 e0       	ldi	r19, 0x00	; 0
    15a8:	99 1f       	adc	r25, r25
    15aa:	99 27       	eor	r25, r25
    15ac:	99 1f       	adc	r25, r25
    15ae:	11 96       	adiw	r26, 0x01	; 1
    15b0:	9c 93       	st	X, r25
    15b2:	11 97       	sbiw	r26, 0x01	; 1
    15b4:	21 15       	cp	r18, r1
    15b6:	31 05       	cpc	r19, r1
    15b8:	a9 f5       	brne	.+106    	; 0x1624 <__unpack_f+0x9e>
    15ba:	41 15       	cp	r20, r1
    15bc:	51 05       	cpc	r21, r1
    15be:	61 05       	cpc	r22, r1
    15c0:	71 05       	cpc	r23, r1
    15c2:	11 f4       	brne	.+4      	; 0x15c8 <__unpack_f+0x42>
    15c4:	82 e0       	ldi	r24, 0x02	; 2
    15c6:	37 c0       	rjmp	.+110    	; 0x1636 <__unpack_f+0xb0>
    15c8:	82 e8       	ldi	r24, 0x82	; 130
    15ca:	9f ef       	ldi	r25, 0xFF	; 255
    15cc:	13 96       	adiw	r26, 0x03	; 3
    15ce:	9c 93       	st	X, r25
    15d0:	8e 93       	st	-X, r24
    15d2:	12 97       	sbiw	r26, 0x02	; 2
    15d4:	9a 01       	movw	r18, r20
    15d6:	ab 01       	movw	r20, r22
    15d8:	67 e0       	ldi	r22, 0x07	; 7
    15da:	22 0f       	add	r18, r18
    15dc:	33 1f       	adc	r19, r19
    15de:	44 1f       	adc	r20, r20
    15e0:	55 1f       	adc	r21, r21
    15e2:	6a 95       	dec	r22
    15e4:	d1 f7       	brne	.-12     	; 0x15da <__unpack_f+0x54>
    15e6:	83 e0       	ldi	r24, 0x03	; 3
    15e8:	8c 93       	st	X, r24
    15ea:	0d c0       	rjmp	.+26     	; 0x1606 <__unpack_f+0x80>
    15ec:	22 0f       	add	r18, r18
    15ee:	33 1f       	adc	r19, r19
    15f0:	44 1f       	adc	r20, r20
    15f2:	55 1f       	adc	r21, r21
    15f4:	12 96       	adiw	r26, 0x02	; 2
    15f6:	8d 91       	ld	r24, X+
    15f8:	9c 91       	ld	r25, X
    15fa:	13 97       	sbiw	r26, 0x03	; 3
    15fc:	01 97       	sbiw	r24, 0x01	; 1
    15fe:	13 96       	adiw	r26, 0x03	; 3
    1600:	9c 93       	st	X, r25
    1602:	8e 93       	st	-X, r24
    1604:	12 97       	sbiw	r26, 0x02	; 2
    1606:	20 30       	cpi	r18, 0x00	; 0
    1608:	80 e0       	ldi	r24, 0x00	; 0
    160a:	38 07       	cpc	r19, r24
    160c:	80 e0       	ldi	r24, 0x00	; 0
    160e:	48 07       	cpc	r20, r24
    1610:	80 e4       	ldi	r24, 0x40	; 64
    1612:	58 07       	cpc	r21, r24
    1614:	58 f3       	brcs	.-42     	; 0x15ec <__unpack_f+0x66>
    1616:	14 96       	adiw	r26, 0x04	; 4
    1618:	2d 93       	st	X+, r18
    161a:	3d 93       	st	X+, r19
    161c:	4d 93       	st	X+, r20
    161e:	5c 93       	st	X, r21
    1620:	17 97       	sbiw	r26, 0x07	; 7
    1622:	08 95       	ret
    1624:	2f 3f       	cpi	r18, 0xFF	; 255
    1626:	31 05       	cpc	r19, r1
    1628:	79 f4       	brne	.+30     	; 0x1648 <__unpack_f+0xc2>
    162a:	41 15       	cp	r20, r1
    162c:	51 05       	cpc	r21, r1
    162e:	61 05       	cpc	r22, r1
    1630:	71 05       	cpc	r23, r1
    1632:	19 f4       	brne	.+6      	; 0x163a <__unpack_f+0xb4>
    1634:	84 e0       	ldi	r24, 0x04	; 4
    1636:	8c 93       	st	X, r24
    1638:	08 95       	ret
    163a:	64 ff       	sbrs	r22, 4
    163c:	03 c0       	rjmp	.+6      	; 0x1644 <__unpack_f+0xbe>
    163e:	81 e0       	ldi	r24, 0x01	; 1
    1640:	8c 93       	st	X, r24
    1642:	12 c0       	rjmp	.+36     	; 0x1668 <__unpack_f+0xe2>
    1644:	1c 92       	st	X, r1
    1646:	10 c0       	rjmp	.+32     	; 0x1668 <__unpack_f+0xe2>
    1648:	2f 57       	subi	r18, 0x7F	; 127
    164a:	30 40       	sbci	r19, 0x00	; 0
    164c:	13 96       	adiw	r26, 0x03	; 3
    164e:	3c 93       	st	X, r19
    1650:	2e 93       	st	-X, r18
    1652:	12 97       	sbiw	r26, 0x02	; 2
    1654:	83 e0       	ldi	r24, 0x03	; 3
    1656:	8c 93       	st	X, r24
    1658:	87 e0       	ldi	r24, 0x07	; 7
    165a:	44 0f       	add	r20, r20
    165c:	55 1f       	adc	r21, r21
    165e:	66 1f       	adc	r22, r22
    1660:	77 1f       	adc	r23, r23
    1662:	8a 95       	dec	r24
    1664:	d1 f7       	brne	.-12     	; 0x165a <__unpack_f+0xd4>
    1666:	70 64       	ori	r23, 0x40	; 64
    1668:	14 96       	adiw	r26, 0x04	; 4
    166a:	4d 93       	st	X+, r20
    166c:	5d 93       	st	X+, r21
    166e:	6d 93       	st	X+, r22
    1670:	7c 93       	st	X, r23
    1672:	17 97       	sbiw	r26, 0x07	; 7
    1674:	08 95       	ret

00001676 <__fpcmp_parts_f>:
    1676:	1f 93       	push	r17
    1678:	dc 01       	movw	r26, r24
    167a:	fb 01       	movw	r30, r22
    167c:	9c 91       	ld	r25, X
    167e:	92 30       	cpi	r25, 0x02	; 2
    1680:	08 f4       	brcc	.+2      	; 0x1684 <__fpcmp_parts_f+0xe>
    1682:	47 c0       	rjmp	.+142    	; 0x1712 <__fpcmp_parts_f+0x9c>
    1684:	80 81       	ld	r24, Z
    1686:	82 30       	cpi	r24, 0x02	; 2
    1688:	08 f4       	brcc	.+2      	; 0x168c <__fpcmp_parts_f+0x16>
    168a:	43 c0       	rjmp	.+134    	; 0x1712 <__fpcmp_parts_f+0x9c>
    168c:	94 30       	cpi	r25, 0x04	; 4
    168e:	51 f4       	brne	.+20     	; 0x16a4 <__fpcmp_parts_f+0x2e>
    1690:	11 96       	adiw	r26, 0x01	; 1
    1692:	1c 91       	ld	r17, X
    1694:	84 30       	cpi	r24, 0x04	; 4
    1696:	99 f5       	brne	.+102    	; 0x16fe <__fpcmp_parts_f+0x88>
    1698:	81 81       	ldd	r24, Z+1	; 0x01
    169a:	68 2f       	mov	r22, r24
    169c:	70 e0       	ldi	r23, 0x00	; 0
    169e:	61 1b       	sub	r22, r17
    16a0:	71 09       	sbc	r23, r1
    16a2:	3f c0       	rjmp	.+126    	; 0x1722 <__fpcmp_parts_f+0xac>
    16a4:	84 30       	cpi	r24, 0x04	; 4
    16a6:	21 f0       	breq	.+8      	; 0x16b0 <__fpcmp_parts_f+0x3a>
    16a8:	92 30       	cpi	r25, 0x02	; 2
    16aa:	31 f4       	brne	.+12     	; 0x16b8 <__fpcmp_parts_f+0x42>
    16ac:	82 30       	cpi	r24, 0x02	; 2
    16ae:	b9 f1       	breq	.+110    	; 0x171e <__fpcmp_parts_f+0xa8>
    16b0:	81 81       	ldd	r24, Z+1	; 0x01
    16b2:	88 23       	and	r24, r24
    16b4:	89 f1       	breq	.+98     	; 0x1718 <__fpcmp_parts_f+0xa2>
    16b6:	2d c0       	rjmp	.+90     	; 0x1712 <__fpcmp_parts_f+0x9c>
    16b8:	11 96       	adiw	r26, 0x01	; 1
    16ba:	1c 91       	ld	r17, X
    16bc:	11 97       	sbiw	r26, 0x01	; 1
    16be:	82 30       	cpi	r24, 0x02	; 2
    16c0:	f1 f0       	breq	.+60     	; 0x16fe <__fpcmp_parts_f+0x88>
    16c2:	81 81       	ldd	r24, Z+1	; 0x01
    16c4:	18 17       	cp	r17, r24
    16c6:	d9 f4       	brne	.+54     	; 0x16fe <__fpcmp_parts_f+0x88>
    16c8:	12 96       	adiw	r26, 0x02	; 2
    16ca:	2d 91       	ld	r18, X+
    16cc:	3c 91       	ld	r19, X
    16ce:	13 97       	sbiw	r26, 0x03	; 3
    16d0:	82 81       	ldd	r24, Z+2	; 0x02
    16d2:	93 81       	ldd	r25, Z+3	; 0x03
    16d4:	82 17       	cp	r24, r18
    16d6:	93 07       	cpc	r25, r19
    16d8:	94 f0       	brlt	.+36     	; 0x16fe <__fpcmp_parts_f+0x88>
    16da:	28 17       	cp	r18, r24
    16dc:	39 07       	cpc	r19, r25
    16de:	bc f0       	brlt	.+46     	; 0x170e <__fpcmp_parts_f+0x98>
    16e0:	14 96       	adiw	r26, 0x04	; 4
    16e2:	8d 91       	ld	r24, X+
    16e4:	9d 91       	ld	r25, X+
    16e6:	0d 90       	ld	r0, X+
    16e8:	bc 91       	ld	r27, X
    16ea:	a0 2d       	mov	r26, r0
    16ec:	24 81       	ldd	r18, Z+4	; 0x04
    16ee:	35 81       	ldd	r19, Z+5	; 0x05
    16f0:	46 81       	ldd	r20, Z+6	; 0x06
    16f2:	57 81       	ldd	r21, Z+7	; 0x07
    16f4:	28 17       	cp	r18, r24
    16f6:	39 07       	cpc	r19, r25
    16f8:	4a 07       	cpc	r20, r26
    16fa:	5b 07       	cpc	r21, r27
    16fc:	18 f4       	brcc	.+6      	; 0x1704 <__fpcmp_parts_f+0x8e>
    16fe:	11 23       	and	r17, r17
    1700:	41 f0       	breq	.+16     	; 0x1712 <__fpcmp_parts_f+0x9c>
    1702:	0a c0       	rjmp	.+20     	; 0x1718 <__fpcmp_parts_f+0xa2>
    1704:	82 17       	cp	r24, r18
    1706:	93 07       	cpc	r25, r19
    1708:	a4 07       	cpc	r26, r20
    170a:	b5 07       	cpc	r27, r21
    170c:	40 f4       	brcc	.+16     	; 0x171e <__fpcmp_parts_f+0xa8>
    170e:	11 23       	and	r17, r17
    1710:	19 f0       	breq	.+6      	; 0x1718 <__fpcmp_parts_f+0xa2>
    1712:	61 e0       	ldi	r22, 0x01	; 1
    1714:	70 e0       	ldi	r23, 0x00	; 0
    1716:	05 c0       	rjmp	.+10     	; 0x1722 <__fpcmp_parts_f+0xac>
    1718:	6f ef       	ldi	r22, 0xFF	; 255
    171a:	7f ef       	ldi	r23, 0xFF	; 255
    171c:	02 c0       	rjmp	.+4      	; 0x1722 <__fpcmp_parts_f+0xac>
    171e:	60 e0       	ldi	r22, 0x00	; 0
    1720:	70 e0       	ldi	r23, 0x00	; 0
    1722:	cb 01       	movw	r24, r22
    1724:	1f 91       	pop	r17
    1726:	08 95       	ret

00001728 <do_rand>:
    1728:	a0 e0       	ldi	r26, 0x00	; 0
    172a:	b0 e0       	ldi	r27, 0x00	; 0
    172c:	ea e9       	ldi	r30, 0x9A	; 154
    172e:	fb e0       	ldi	r31, 0x0B	; 11
    1730:	0c 94 24 0c 	jmp	0x1848	; 0x1848 <__prologue_saves__+0x10>
    1734:	ec 01       	movw	r28, r24
    1736:	a8 80       	ld	r10, Y
    1738:	b9 80       	ldd	r11, Y+1	; 0x01
    173a:	ca 80       	ldd	r12, Y+2	; 0x02
    173c:	db 80       	ldd	r13, Y+3	; 0x03
    173e:	a1 14       	cp	r10, r1
    1740:	b1 04       	cpc	r11, r1
    1742:	c1 04       	cpc	r12, r1
    1744:	d1 04       	cpc	r13, r1
    1746:	41 f4       	brne	.+16     	; 0x1758 <do_rand+0x30>
    1748:	84 e2       	ldi	r24, 0x24	; 36
    174a:	a8 2e       	mov	r10, r24
    174c:	89 ed       	ldi	r24, 0xD9	; 217
    174e:	b8 2e       	mov	r11, r24
    1750:	8b e5       	ldi	r24, 0x5B	; 91
    1752:	c8 2e       	mov	r12, r24
    1754:	87 e0       	ldi	r24, 0x07	; 7
    1756:	d8 2e       	mov	r13, r24
    1758:	c6 01       	movw	r24, r12
    175a:	b5 01       	movw	r22, r10
    175c:	2d e1       	ldi	r18, 0x1D	; 29
    175e:	33 ef       	ldi	r19, 0xF3	; 243
    1760:	41 e0       	ldi	r20, 0x01	; 1
    1762:	50 e0       	ldi	r21, 0x00	; 0
    1764:	0e 94 72 0c 	call	0x18e4	; 0x18e4 <__divmodsi4>
    1768:	27 ea       	ldi	r18, 0xA7	; 167
    176a:	31 e4       	ldi	r19, 0x41	; 65
    176c:	40 e0       	ldi	r20, 0x00	; 0
    176e:	50 e0       	ldi	r21, 0x00	; 0
    1770:	0e 94 53 0c 	call	0x18a6	; 0x18a6 <__mulsi3>
    1774:	7b 01       	movw	r14, r22
    1776:	8c 01       	movw	r16, r24
    1778:	c6 01       	movw	r24, r12
    177a:	b5 01       	movw	r22, r10
    177c:	2d e1       	ldi	r18, 0x1D	; 29
    177e:	33 ef       	ldi	r19, 0xF3	; 243
    1780:	41 e0       	ldi	r20, 0x01	; 1
    1782:	50 e0       	ldi	r21, 0x00	; 0
    1784:	0e 94 72 0c 	call	0x18e4	; 0x18e4 <__divmodsi4>
    1788:	ca 01       	movw	r24, r20
    178a:	b9 01       	movw	r22, r18
    178c:	2c ee       	ldi	r18, 0xEC	; 236
    178e:	34 ef       	ldi	r19, 0xF4	; 244
    1790:	4f ef       	ldi	r20, 0xFF	; 255
    1792:	5f ef       	ldi	r21, 0xFF	; 255
    1794:	0e 94 53 0c 	call	0x18a6	; 0x18a6 <__mulsi3>
    1798:	6e 0d       	add	r22, r14
    179a:	7f 1d       	adc	r23, r15
    179c:	80 1f       	adc	r24, r16
    179e:	91 1f       	adc	r25, r17
    17a0:	97 ff       	sbrs	r25, 7
    17a2:	04 c0       	rjmp	.+8      	; 0x17ac <do_rand+0x84>
    17a4:	61 50       	subi	r22, 0x01	; 1
    17a6:	70 40       	sbci	r23, 0x00	; 0
    17a8:	80 40       	sbci	r24, 0x00	; 0
    17aa:	90 48       	sbci	r25, 0x80	; 128
    17ac:	68 83       	st	Y, r22
    17ae:	79 83       	std	Y+1, r23	; 0x01
    17b0:	8a 83       	std	Y+2, r24	; 0x02
    17b2:	9b 83       	std	Y+3, r25	; 0x03
    17b4:	9b 01       	movw	r18, r22
    17b6:	3f 77       	andi	r19, 0x7F	; 127
    17b8:	c9 01       	movw	r24, r18
    17ba:	cd b7       	in	r28, 0x3d	; 61
    17bc:	de b7       	in	r29, 0x3e	; 62
    17be:	ea e0       	ldi	r30, 0x0A	; 10
    17c0:	0c 94 40 0c 	jmp	0x1880	; 0x1880 <__epilogue_restores__+0x10>

000017c4 <rand_r>:
    17c4:	0e 94 94 0b 	call	0x1728	; 0x1728 <do_rand>
    17c8:	08 95       	ret

000017ca <rand>:
    17ca:	88 e6       	ldi	r24, 0x68	; 104
    17cc:	91 e0       	ldi	r25, 0x01	; 1
    17ce:	0e 94 94 0b 	call	0x1728	; 0x1728 <do_rand>
    17d2:	08 95       	ret

000017d4 <srand>:
    17d4:	a0 e0       	ldi	r26, 0x00	; 0
    17d6:	b0 e0       	ldi	r27, 0x00	; 0
    17d8:	80 93 68 01 	sts	0x0168, r24
    17dc:	90 93 69 01 	sts	0x0169, r25
    17e0:	a0 93 6a 01 	sts	0x016A, r26
    17e4:	b0 93 6b 01 	sts	0x016B, r27
    17e8:	08 95       	ret

000017ea <__divmodhi4>:
    17ea:	97 fb       	bst	r25, 7
    17ec:	09 2e       	mov	r0, r25
    17ee:	07 26       	eor	r0, r23
    17f0:	0a d0       	rcall	.+20     	; 0x1806 <__divmodhi4_neg1>
    17f2:	77 fd       	sbrc	r23, 7
    17f4:	04 d0       	rcall	.+8      	; 0x17fe <__divmodhi4_neg2>
    17f6:	0c d0       	rcall	.+24     	; 0x1810 <__udivmodhi4>
    17f8:	06 d0       	rcall	.+12     	; 0x1806 <__divmodhi4_neg1>
    17fa:	00 20       	and	r0, r0
    17fc:	1a f4       	brpl	.+6      	; 0x1804 <__divmodhi4_exit>

000017fe <__divmodhi4_neg2>:
    17fe:	70 95       	com	r23
    1800:	61 95       	neg	r22
    1802:	7f 4f       	sbci	r23, 0xFF	; 255

00001804 <__divmodhi4_exit>:
    1804:	08 95       	ret

00001806 <__divmodhi4_neg1>:
    1806:	f6 f7       	brtc	.-4      	; 0x1804 <__divmodhi4_exit>
    1808:	90 95       	com	r25
    180a:	81 95       	neg	r24
    180c:	9f 4f       	sbci	r25, 0xFF	; 255
    180e:	08 95       	ret

00001810 <__udivmodhi4>:
    1810:	aa 1b       	sub	r26, r26
    1812:	bb 1b       	sub	r27, r27
    1814:	51 e1       	ldi	r21, 0x11	; 17
    1816:	07 c0       	rjmp	.+14     	; 0x1826 <__udivmodhi4_ep>

00001818 <__udivmodhi4_loop>:
    1818:	aa 1f       	adc	r26, r26
    181a:	bb 1f       	adc	r27, r27
    181c:	a6 17       	cp	r26, r22
    181e:	b7 07       	cpc	r27, r23
    1820:	10 f0       	brcs	.+4      	; 0x1826 <__udivmodhi4_ep>
    1822:	a6 1b       	sub	r26, r22
    1824:	b7 0b       	sbc	r27, r23

00001826 <__udivmodhi4_ep>:
    1826:	88 1f       	adc	r24, r24
    1828:	99 1f       	adc	r25, r25
    182a:	5a 95       	dec	r21
    182c:	a9 f7       	brne	.-22     	; 0x1818 <__udivmodhi4_loop>
    182e:	80 95       	com	r24
    1830:	90 95       	com	r25
    1832:	bc 01       	movw	r22, r24
    1834:	cd 01       	movw	r24, r26
    1836:	08 95       	ret

00001838 <__prologue_saves__>:
    1838:	2f 92       	push	r2
    183a:	3f 92       	push	r3
    183c:	4f 92       	push	r4
    183e:	5f 92       	push	r5
    1840:	6f 92       	push	r6
    1842:	7f 92       	push	r7
    1844:	8f 92       	push	r8
    1846:	9f 92       	push	r9
    1848:	af 92       	push	r10
    184a:	bf 92       	push	r11
    184c:	cf 92       	push	r12
    184e:	df 92       	push	r13
    1850:	ef 92       	push	r14
    1852:	ff 92       	push	r15
    1854:	0f 93       	push	r16
    1856:	1f 93       	push	r17
    1858:	cf 93       	push	r28
    185a:	df 93       	push	r29
    185c:	cd b7       	in	r28, 0x3d	; 61
    185e:	de b7       	in	r29, 0x3e	; 62
    1860:	ca 1b       	sub	r28, r26
    1862:	db 0b       	sbc	r29, r27
    1864:	0f b6       	in	r0, 0x3f	; 63
    1866:	f8 94       	cli
    1868:	de bf       	out	0x3e, r29	; 62
    186a:	0f be       	out	0x3f, r0	; 63
    186c:	cd bf       	out	0x3d, r28	; 61
    186e:	09 94       	ijmp

00001870 <__epilogue_restores__>:
    1870:	2a 88       	ldd	r2, Y+18	; 0x12
    1872:	39 88       	ldd	r3, Y+17	; 0x11
    1874:	48 88       	ldd	r4, Y+16	; 0x10
    1876:	5f 84       	ldd	r5, Y+15	; 0x0f
    1878:	6e 84       	ldd	r6, Y+14	; 0x0e
    187a:	7d 84       	ldd	r7, Y+13	; 0x0d
    187c:	8c 84       	ldd	r8, Y+12	; 0x0c
    187e:	9b 84       	ldd	r9, Y+11	; 0x0b
    1880:	aa 84       	ldd	r10, Y+10	; 0x0a
    1882:	b9 84       	ldd	r11, Y+9	; 0x09
    1884:	c8 84       	ldd	r12, Y+8	; 0x08
    1886:	df 80       	ldd	r13, Y+7	; 0x07
    1888:	ee 80       	ldd	r14, Y+6	; 0x06
    188a:	fd 80       	ldd	r15, Y+5	; 0x05
    188c:	0c 81       	ldd	r16, Y+4	; 0x04
    188e:	1b 81       	ldd	r17, Y+3	; 0x03
    1890:	aa 81       	ldd	r26, Y+2	; 0x02
    1892:	b9 81       	ldd	r27, Y+1	; 0x01
    1894:	ce 0f       	add	r28, r30
    1896:	d1 1d       	adc	r29, r1
    1898:	0f b6       	in	r0, 0x3f	; 63
    189a:	f8 94       	cli
    189c:	de bf       	out	0x3e, r29	; 62
    189e:	0f be       	out	0x3f, r0	; 63
    18a0:	cd bf       	out	0x3d, r28	; 61
    18a2:	ed 01       	movw	r28, r26
    18a4:	08 95       	ret

000018a6 <__mulsi3>:
    18a6:	62 9f       	mul	r22, r18
    18a8:	d0 01       	movw	r26, r0
    18aa:	73 9f       	mul	r23, r19
    18ac:	f0 01       	movw	r30, r0
    18ae:	82 9f       	mul	r24, r18
    18b0:	e0 0d       	add	r30, r0
    18b2:	f1 1d       	adc	r31, r1
    18b4:	64 9f       	mul	r22, r20
    18b6:	e0 0d       	add	r30, r0
    18b8:	f1 1d       	adc	r31, r1
    18ba:	92 9f       	mul	r25, r18
    18bc:	f0 0d       	add	r31, r0
    18be:	83 9f       	mul	r24, r19
    18c0:	f0 0d       	add	r31, r0
    18c2:	74 9f       	mul	r23, r20
    18c4:	f0 0d       	add	r31, r0
    18c6:	65 9f       	mul	r22, r21
    18c8:	f0 0d       	add	r31, r0
    18ca:	99 27       	eor	r25, r25
    18cc:	72 9f       	mul	r23, r18
    18ce:	b0 0d       	add	r27, r0
    18d0:	e1 1d       	adc	r30, r1
    18d2:	f9 1f       	adc	r31, r25
    18d4:	63 9f       	mul	r22, r19
    18d6:	b0 0d       	add	r27, r0
    18d8:	e1 1d       	adc	r30, r1
    18da:	f9 1f       	adc	r31, r25
    18dc:	bd 01       	movw	r22, r26
    18de:	cf 01       	movw	r24, r30
    18e0:	11 24       	eor	r1, r1
    18e2:	08 95       	ret

000018e4 <__divmodsi4>:
    18e4:	97 fb       	bst	r25, 7
    18e6:	09 2e       	mov	r0, r25
    18e8:	05 26       	eor	r0, r21
    18ea:	0e d0       	rcall	.+28     	; 0x1908 <__divmodsi4_neg1>
    18ec:	57 fd       	sbrc	r21, 7
    18ee:	04 d0       	rcall	.+8      	; 0x18f8 <__divmodsi4_neg2>
    18f0:	14 d0       	rcall	.+40     	; 0x191a <__udivmodsi4>
    18f2:	0a d0       	rcall	.+20     	; 0x1908 <__divmodsi4_neg1>
    18f4:	00 1c       	adc	r0, r0
    18f6:	38 f4       	brcc	.+14     	; 0x1906 <__divmodsi4_exit>

000018f8 <__divmodsi4_neg2>:
    18f8:	50 95       	com	r21
    18fa:	40 95       	com	r20
    18fc:	30 95       	com	r19
    18fe:	21 95       	neg	r18
    1900:	3f 4f       	sbci	r19, 0xFF	; 255
    1902:	4f 4f       	sbci	r20, 0xFF	; 255
    1904:	5f 4f       	sbci	r21, 0xFF	; 255

00001906 <__divmodsi4_exit>:
    1906:	08 95       	ret

00001908 <__divmodsi4_neg1>:
    1908:	f6 f7       	brtc	.-4      	; 0x1906 <__divmodsi4_exit>
    190a:	90 95       	com	r25
    190c:	80 95       	com	r24
    190e:	70 95       	com	r23
    1910:	61 95       	neg	r22
    1912:	7f 4f       	sbci	r23, 0xFF	; 255
    1914:	8f 4f       	sbci	r24, 0xFF	; 255
    1916:	9f 4f       	sbci	r25, 0xFF	; 255
    1918:	08 95       	ret

0000191a <__udivmodsi4>:
    191a:	a1 e2       	ldi	r26, 0x21	; 33
    191c:	1a 2e       	mov	r1, r26
    191e:	aa 1b       	sub	r26, r26
    1920:	bb 1b       	sub	r27, r27
    1922:	fd 01       	movw	r30, r26
    1924:	0d c0       	rjmp	.+26     	; 0x1940 <__udivmodsi4_ep>

00001926 <__udivmodsi4_loop>:
    1926:	aa 1f       	adc	r26, r26
    1928:	bb 1f       	adc	r27, r27
    192a:	ee 1f       	adc	r30, r30
    192c:	ff 1f       	adc	r31, r31
    192e:	a2 17       	cp	r26, r18
    1930:	b3 07       	cpc	r27, r19
    1932:	e4 07       	cpc	r30, r20
    1934:	f5 07       	cpc	r31, r21
    1936:	20 f0       	brcs	.+8      	; 0x1940 <__udivmodsi4_ep>
    1938:	a2 1b       	sub	r26, r18
    193a:	b3 0b       	sbc	r27, r19
    193c:	e4 0b       	sbc	r30, r20
    193e:	f5 0b       	sbc	r31, r21

00001940 <__udivmodsi4_ep>:
    1940:	66 1f       	adc	r22, r22
    1942:	77 1f       	adc	r23, r23
    1944:	88 1f       	adc	r24, r24
    1946:	99 1f       	adc	r25, r25
    1948:	1a 94       	dec	r1
    194a:	69 f7       	brne	.-38     	; 0x1926 <__udivmodsi4_loop>
    194c:	60 95       	com	r22
    194e:	70 95       	com	r23
    1950:	80 95       	com	r24
    1952:	90 95       	com	r25
    1954:	9b 01       	movw	r18, r22
    1956:	ac 01       	movw	r20, r24
    1958:	bd 01       	movw	r22, r26
    195a:	cf 01       	movw	r24, r30
    195c:	08 95       	ret

0000195e <_exit>:
    195e:	f8 94       	cli

00001960 <__stop_program>:
    1960:	ff cf       	rjmp	.-2      	; 0x1960 <__stop_program>
